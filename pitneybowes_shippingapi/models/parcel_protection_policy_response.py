# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pitneybowes_shippingapi.configuration import Configuration


class ParcelProtectionPolicyResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'content': 'list[ParcelProtectionPolicyResponseContent]',
        'last': 'bool',
        'total_elements': 'int',
        'total_pages': 'int',
        'first': 'bool',
        'number_of_elements': 'int',
        'sort': 'list[ParcelProtectionPolicyResponseSort]',
        'size': 'int',
        'number': 'int'
    }

    attribute_map = {
        'content': 'content',
        'last': 'last',
        'total_elements': 'totalElements',
        'total_pages': 'totalPages',
        'first': 'first',
        'number_of_elements': 'numberOfElements',
        'sort': 'sort',
        'size': 'size',
        'number': 'number'
    }

    def __init__(self, content=None, last=None, total_elements=None, total_pages=None, first=None, number_of_elements=None, sort=None, size=None, number=None, local_vars_configuration=None):  # noqa: E501
        """ParcelProtectionPolicyResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._content = None
        self._last = None
        self._total_elements = None
        self._total_pages = None
        self._first = None
        self._number_of_elements = None
        self._sort = None
        self._size = None
        self._number = None
        self.discriminator = None

        if content is not None:
            self.content = content
        if last is not None:
            self.last = last
        if total_elements is not None:
            self.total_elements = total_elements
        if total_pages is not None:
            self.total_pages = total_pages
        if first is not None:
            self.first = first
        if number_of_elements is not None:
            self.number_of_elements = number_of_elements
        if sort is not None:
            self.sort = sort
        if size is not None:
            self.size = size
        if number is not None:
            self.number = number

    @property
    def content(self):
        """Gets the content of this ParcelProtectionPolicyResponse.  # noqa: E501


        :return: The content of this ParcelProtectionPolicyResponse.  # noqa: E501
        :rtype: list[ParcelProtectionPolicyResponseContent]
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ParcelProtectionPolicyResponse.


        :param content: The content of this ParcelProtectionPolicyResponse.  # noqa: E501
        :type: list[ParcelProtectionPolicyResponseContent]
        """

        self._content = content

    @property
    def last(self):
        """Gets the last of this ParcelProtectionPolicyResponse.  # noqa: E501


        :return: The last of this ParcelProtectionPolicyResponse.  # noqa: E501
        :rtype: bool
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this ParcelProtectionPolicyResponse.


        :param last: The last of this ParcelProtectionPolicyResponse.  # noqa: E501
        :type: bool
        """

        self._last = last

    @property
    def total_elements(self):
        """Gets the total_elements of this ParcelProtectionPolicyResponse.  # noqa: E501


        :return: The total_elements of this ParcelProtectionPolicyResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_elements

    @total_elements.setter
    def total_elements(self, total_elements):
        """Sets the total_elements of this ParcelProtectionPolicyResponse.


        :param total_elements: The total_elements of this ParcelProtectionPolicyResponse.  # noqa: E501
        :type: int
        """

        self._total_elements = total_elements

    @property
    def total_pages(self):
        """Gets the total_pages of this ParcelProtectionPolicyResponse.  # noqa: E501


        :return: The total_pages of this ParcelProtectionPolicyResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this ParcelProtectionPolicyResponse.


        :param total_pages: The total_pages of this ParcelProtectionPolicyResponse.  # noqa: E501
        :type: int
        """

        self._total_pages = total_pages

    @property
    def first(self):
        """Gets the first of this ParcelProtectionPolicyResponse.  # noqa: E501


        :return: The first of this ParcelProtectionPolicyResponse.  # noqa: E501
        :rtype: bool
        """
        return self._first

    @first.setter
    def first(self, first):
        """Sets the first of this ParcelProtectionPolicyResponse.


        :param first: The first of this ParcelProtectionPolicyResponse.  # noqa: E501
        :type: bool
        """

        self._first = first

    @property
    def number_of_elements(self):
        """Gets the number_of_elements of this ParcelProtectionPolicyResponse.  # noqa: E501


        :return: The number_of_elements of this ParcelProtectionPolicyResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_of_elements

    @number_of_elements.setter
    def number_of_elements(self, number_of_elements):
        """Sets the number_of_elements of this ParcelProtectionPolicyResponse.


        :param number_of_elements: The number_of_elements of this ParcelProtectionPolicyResponse.  # noqa: E501
        :type: int
        """

        self._number_of_elements = number_of_elements

    @property
    def sort(self):
        """Gets the sort of this ParcelProtectionPolicyResponse.  # noqa: E501


        :return: The sort of this ParcelProtectionPolicyResponse.  # noqa: E501
        :rtype: list[ParcelProtectionPolicyResponseSort]
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this ParcelProtectionPolicyResponse.


        :param sort: The sort of this ParcelProtectionPolicyResponse.  # noqa: E501
        :type: list[ParcelProtectionPolicyResponseSort]
        """

        self._sort = sort

    @property
    def size(self):
        """Gets the size of this ParcelProtectionPolicyResponse.  # noqa: E501


        :return: The size of this ParcelProtectionPolicyResponse.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ParcelProtectionPolicyResponse.


        :param size: The size of this ParcelProtectionPolicyResponse.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def number(self):
        """Gets the number of this ParcelProtectionPolicyResponse.  # noqa: E501


        :return: The number of this ParcelProtectionPolicyResponse.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ParcelProtectionPolicyResponse.


        :param number: The number of this ParcelProtectionPolicyResponse.  # noqa: E501
        :type: int
        """

        self._number = number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParcelProtectionPolicyResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ParcelProtectionPolicyResponse):
            return True

        return self.to_dict() != other.to_dict()
