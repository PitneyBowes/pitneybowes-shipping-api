# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pitneybowes_shippingapi.configuration import Configuration


class CrossBorderQuotesRequestPricing(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'price': 'int',
        'cod_price': 'list[CrossBorderQuotesRequestPricingCodPrice]',
        'dutiable_value': 'int'
    }

    attribute_map = {
        'price': 'price',
        'cod_price': 'codPrice',
        'dutiable_value': 'dutiableValue'
    }

    def __init__(self, price=None, cod_price=None, dutiable_value=None, local_vars_configuration=None):  # noqa: E501
        """CrossBorderQuotesRequestPricing - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._price = None
        self._cod_price = None
        self._dutiable_value = None
        self.discriminator = None

        if price is not None:
            self.price = price
        if cod_price is not None:
            self.cod_price = cod_price
        if dutiable_value is not None:
            self.dutiable_value = dutiable_value

    @property
    def price(self):
        """Gets the price of this CrossBorderQuotesRequestPricing.  # noqa: E501


        :return: The price of this CrossBorderQuotesRequestPricing.  # noqa: E501
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CrossBorderQuotesRequestPricing.


        :param price: The price of this CrossBorderQuotesRequestPricing.  # noqa: E501
        :type: int
        """

        self._price = price

    @property
    def cod_price(self):
        """Gets the cod_price of this CrossBorderQuotesRequestPricing.  # noqa: E501


        :return: The cod_price of this CrossBorderQuotesRequestPricing.  # noqa: E501
        :rtype: list[CrossBorderQuotesRequestPricingCodPrice]
        """
        return self._cod_price

    @cod_price.setter
    def cod_price(self, cod_price):
        """Sets the cod_price of this CrossBorderQuotesRequestPricing.


        :param cod_price: The cod_price of this CrossBorderQuotesRequestPricing.  # noqa: E501
        :type: list[CrossBorderQuotesRequestPricingCodPrice]
        """

        self._cod_price = cod_price

    @property
    def dutiable_value(self):
        """Gets the dutiable_value of this CrossBorderQuotesRequestPricing.  # noqa: E501


        :return: The dutiable_value of this CrossBorderQuotesRequestPricing.  # noqa: E501
        :rtype: int
        """
        return self._dutiable_value

    @dutiable_value.setter
    def dutiable_value(self, dutiable_value):
        """Sets the dutiable_value of this CrossBorderQuotesRequestPricing.


        :param dutiable_value: The dutiable_value of this CrossBorderQuotesRequestPricing.  # noqa: E501
        :type: int
        """

        self._dutiable_value = dutiable_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrossBorderQuotesRequestPricing):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CrossBorderQuotesRequestPricing):
            return True

        return self.to_dict() != other.to_dict()
