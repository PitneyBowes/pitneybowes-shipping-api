# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pitneybowes_shippingapi.configuration import Configuration


class ServicesParameterRule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'branded_name': 'str',
        'required': 'bool',
        'min_value': 'float',
        'max_value': 'float',
        'free_value': 'float',
        'format': 'str',
        'description': 'str'
    }

    attribute_map = {
        'name': 'name',
        'branded_name': 'brandedName',
        'required': 'required',
        'min_value': 'minValue',
        'max_value': 'maxValue',
        'free_value': 'freeValue',
        'format': 'format',
        'description': 'description'
    }

    def __init__(self, name=None, branded_name=None, required=None, min_value=None, max_value=None, free_value=None, format=None, description=None, local_vars_configuration=None):  # noqa: E501
        """ServicesParameterRule - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._branded_name = None
        self._required = None
        self._min_value = None
        self._max_value = None
        self._free_value = None
        self._format = None
        self._description = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if branded_name is not None:
            self.branded_name = branded_name
        if required is not None:
            self.required = required
        if min_value is not None:
            self.min_value = min_value
        if max_value is not None:
            self.max_value = max_value
        if free_value is not None:
            self.free_value = free_value
        if format is not None:
            self.format = format
        if description is not None:
            self.description = description

    @property
    def name(self):
        """Gets the name of this ServicesParameterRule.  # noqa: E501


        :return: The name of this ServicesParameterRule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServicesParameterRule.


        :param name: The name of this ServicesParameterRule.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def branded_name(self):
        """Gets the branded_name of this ServicesParameterRule.  # noqa: E501


        :return: The branded_name of this ServicesParameterRule.  # noqa: E501
        :rtype: str
        """
        return self._branded_name

    @branded_name.setter
    def branded_name(self, branded_name):
        """Sets the branded_name of this ServicesParameterRule.


        :param branded_name: The branded_name of this ServicesParameterRule.  # noqa: E501
        :type: str
        """

        self._branded_name = branded_name

    @property
    def required(self):
        """Gets the required of this ServicesParameterRule.  # noqa: E501


        :return: The required of this ServicesParameterRule.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this ServicesParameterRule.


        :param required: The required of this ServicesParameterRule.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def min_value(self):
        """Gets the min_value of this ServicesParameterRule.  # noqa: E501


        :return: The min_value of this ServicesParameterRule.  # noqa: E501
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this ServicesParameterRule.


        :param min_value: The min_value of this ServicesParameterRule.  # noqa: E501
        :type: float
        """

        self._min_value = min_value

    @property
    def max_value(self):
        """Gets the max_value of this ServicesParameterRule.  # noqa: E501


        :return: The max_value of this ServicesParameterRule.  # noqa: E501
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this ServicesParameterRule.


        :param max_value: The max_value of this ServicesParameterRule.  # noqa: E501
        :type: float
        """

        self._max_value = max_value

    @property
    def free_value(self):
        """Gets the free_value of this ServicesParameterRule.  # noqa: E501


        :return: The free_value of this ServicesParameterRule.  # noqa: E501
        :rtype: float
        """
        return self._free_value

    @free_value.setter
    def free_value(self, free_value):
        """Sets the free_value of this ServicesParameterRule.


        :param free_value: The free_value of this ServicesParameterRule.  # noqa: E501
        :type: float
        """

        self._free_value = free_value

    @property
    def format(self):
        """Gets the format of this ServicesParameterRule.  # noqa: E501


        :return: The format of this ServicesParameterRule.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ServicesParameterRule.


        :param format: The format of this ServicesParameterRule.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def description(self):
        """Gets the description of this ServicesParameterRule.  # noqa: E501


        :return: The description of this ServicesParameterRule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServicesParameterRule.


        :param description: The description of this ServicesParameterRule.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServicesParameterRule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServicesParameterRule):
            return True

        return self.to_dict() != other.to_dict()
