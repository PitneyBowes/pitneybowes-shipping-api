# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pitneybowes_shippingapi.configuration import Configuration


class CommodityInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cargo_air_craft': 'bool',
        'hazard_class': 'str',
        'infectious_substance_contact': 'InfectiousSubstanceContact',
        'inner_receptacles_quantity': 'int',
        'inner_receptacles_quantity_uom': 'str',
        'packaging_group': 'str',
        'packaging_instructions': 'str',
        'percentage': 'float',
        'proper_shipping_name': 'str',
        'quantity': 'int',
        'quantity_uom': 'str',
        'radio_activity_detail': 'RadioActivityDetail',
        'radio_nuclide_detail': 'RadioNuclideDetail',
        'reportable_quantity': 'bool',
        'technical_name': 'str',
        'un_id': 'str'
    }

    attribute_map = {
        'cargo_air_craft': 'cargoAirCraft',
        'hazard_class': 'hazardClass',
        'infectious_substance_contact': 'infectiousSubstanceContact',
        'inner_receptacles_quantity': 'innerReceptaclesQuantity',
        'inner_receptacles_quantity_uom': 'innerReceptaclesQuantityUOM',
        'packaging_group': 'packagingGroup',
        'packaging_instructions': 'packagingInstructions',
        'percentage': 'percentage',
        'proper_shipping_name': 'properShippingName',
        'quantity': 'quantity',
        'quantity_uom': 'quantityUOM',
        'radio_activity_detail': 'radioActivityDetail',
        'radio_nuclide_detail': 'radioNuclideDetail',
        'reportable_quantity': 'reportableQuantity',
        'technical_name': 'technicalName',
        'un_id': 'unId'
    }

    def __init__(self, cargo_air_craft=None, hazard_class=None, infectious_substance_contact=None, inner_receptacles_quantity=None, inner_receptacles_quantity_uom=None, packaging_group=None, packaging_instructions=None, percentage=None, proper_shipping_name=None, quantity=None, quantity_uom=None, radio_activity_detail=None, radio_nuclide_detail=None, reportable_quantity=None, technical_name=None, un_id=None, local_vars_configuration=None):  # noqa: E501
        """CommodityInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cargo_air_craft = None
        self._hazard_class = None
        self._infectious_substance_contact = None
        self._inner_receptacles_quantity = None
        self._inner_receptacles_quantity_uom = None
        self._packaging_group = None
        self._packaging_instructions = None
        self._percentage = None
        self._proper_shipping_name = None
        self._quantity = None
        self._quantity_uom = None
        self._radio_activity_detail = None
        self._radio_nuclide_detail = None
        self._reportable_quantity = None
        self._technical_name = None
        self._un_id = None
        self.discriminator = None

        if cargo_air_craft is not None:
            self.cargo_air_craft = cargo_air_craft
        if hazard_class is not None:
            self.hazard_class = hazard_class
        if infectious_substance_contact is not None:
            self.infectious_substance_contact = infectious_substance_contact
        if inner_receptacles_quantity is not None:
            self.inner_receptacles_quantity = inner_receptacles_quantity
        if inner_receptacles_quantity_uom is not None:
            self.inner_receptacles_quantity_uom = inner_receptacles_quantity_uom
        if packaging_group is not None:
            self.packaging_group = packaging_group
        if packaging_instructions is not None:
            self.packaging_instructions = packaging_instructions
        if percentage is not None:
            self.percentage = percentage
        if proper_shipping_name is not None:
            self.proper_shipping_name = proper_shipping_name
        if quantity is not None:
            self.quantity = quantity
        if quantity_uom is not None:
            self.quantity_uom = quantity_uom
        if radio_activity_detail is not None:
            self.radio_activity_detail = radio_activity_detail
        if radio_nuclide_detail is not None:
            self.radio_nuclide_detail = radio_nuclide_detail
        if reportable_quantity is not None:
            self.reportable_quantity = reportable_quantity
        if technical_name is not None:
            self.technical_name = technical_name
        if un_id is not None:
            self.un_id = un_id

    @property
    def cargo_air_craft(self):
        """Gets the cargo_air_craft of this CommodityInfo.  # noqa: E501


        :return: The cargo_air_craft of this CommodityInfo.  # noqa: E501
        :rtype: bool
        """
        return self._cargo_air_craft

    @cargo_air_craft.setter
    def cargo_air_craft(self, cargo_air_craft):
        """Sets the cargo_air_craft of this CommodityInfo.


        :param cargo_air_craft: The cargo_air_craft of this CommodityInfo.  # noqa: E501
        :type: bool
        """

        self._cargo_air_craft = cargo_air_craft

    @property
    def hazard_class(self):
        """Gets the hazard_class of this CommodityInfo.  # noqa: E501


        :return: The hazard_class of this CommodityInfo.  # noqa: E501
        :rtype: str
        """
        return self._hazard_class

    @hazard_class.setter
    def hazard_class(self, hazard_class):
        """Sets the hazard_class of this CommodityInfo.


        :param hazard_class: The hazard_class of this CommodityInfo.  # noqa: E501
        :type: str
        """

        self._hazard_class = hazard_class

    @property
    def infectious_substance_contact(self):
        """Gets the infectious_substance_contact of this CommodityInfo.  # noqa: E501


        :return: The infectious_substance_contact of this CommodityInfo.  # noqa: E501
        :rtype: InfectiousSubstanceContact
        """
        return self._infectious_substance_contact

    @infectious_substance_contact.setter
    def infectious_substance_contact(self, infectious_substance_contact):
        """Sets the infectious_substance_contact of this CommodityInfo.


        :param infectious_substance_contact: The infectious_substance_contact of this CommodityInfo.  # noqa: E501
        :type: InfectiousSubstanceContact
        """

        self._infectious_substance_contact = infectious_substance_contact

    @property
    def inner_receptacles_quantity(self):
        """Gets the inner_receptacles_quantity of this CommodityInfo.  # noqa: E501


        :return: The inner_receptacles_quantity of this CommodityInfo.  # noqa: E501
        :rtype: int
        """
        return self._inner_receptacles_quantity

    @inner_receptacles_quantity.setter
    def inner_receptacles_quantity(self, inner_receptacles_quantity):
        """Sets the inner_receptacles_quantity of this CommodityInfo.


        :param inner_receptacles_quantity: The inner_receptacles_quantity of this CommodityInfo.  # noqa: E501
        :type: int
        """

        self._inner_receptacles_quantity = inner_receptacles_quantity

    @property
    def inner_receptacles_quantity_uom(self):
        """Gets the inner_receptacles_quantity_uom of this CommodityInfo.  # noqa: E501


        :return: The inner_receptacles_quantity_uom of this CommodityInfo.  # noqa: E501
        :rtype: str
        """
        return self._inner_receptacles_quantity_uom

    @inner_receptacles_quantity_uom.setter
    def inner_receptacles_quantity_uom(self, inner_receptacles_quantity_uom):
        """Sets the inner_receptacles_quantity_uom of this CommodityInfo.


        :param inner_receptacles_quantity_uom: The inner_receptacles_quantity_uom of this CommodityInfo.  # noqa: E501
        :type: str
        """

        self._inner_receptacles_quantity_uom = inner_receptacles_quantity_uom

    @property
    def packaging_group(self):
        """Gets the packaging_group of this CommodityInfo.  # noqa: E501


        :return: The packaging_group of this CommodityInfo.  # noqa: E501
        :rtype: str
        """
        return self._packaging_group

    @packaging_group.setter
    def packaging_group(self, packaging_group):
        """Sets the packaging_group of this CommodityInfo.


        :param packaging_group: The packaging_group of this CommodityInfo.  # noqa: E501
        :type: str
        """

        self._packaging_group = packaging_group

    @property
    def packaging_instructions(self):
        """Gets the packaging_instructions of this CommodityInfo.  # noqa: E501


        :return: The packaging_instructions of this CommodityInfo.  # noqa: E501
        :rtype: str
        """
        return self._packaging_instructions

    @packaging_instructions.setter
    def packaging_instructions(self, packaging_instructions):
        """Sets the packaging_instructions of this CommodityInfo.


        :param packaging_instructions: The packaging_instructions of this CommodityInfo.  # noqa: E501
        :type: str
        """

        self._packaging_instructions = packaging_instructions

    @property
    def percentage(self):
        """Gets the percentage of this CommodityInfo.  # noqa: E501


        :return: The percentage of this CommodityInfo.  # noqa: E501
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this CommodityInfo.


        :param percentage: The percentage of this CommodityInfo.  # noqa: E501
        :type: float
        """

        self._percentage = percentage

    @property
    def proper_shipping_name(self):
        """Gets the proper_shipping_name of this CommodityInfo.  # noqa: E501


        :return: The proper_shipping_name of this CommodityInfo.  # noqa: E501
        :rtype: str
        """
        return self._proper_shipping_name

    @proper_shipping_name.setter
    def proper_shipping_name(self, proper_shipping_name):
        """Sets the proper_shipping_name of this CommodityInfo.


        :param proper_shipping_name: The proper_shipping_name of this CommodityInfo.  # noqa: E501
        :type: str
        """

        self._proper_shipping_name = proper_shipping_name

    @property
    def quantity(self):
        """Gets the quantity of this CommodityInfo.  # noqa: E501


        :return: The quantity of this CommodityInfo.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this CommodityInfo.


        :param quantity: The quantity of this CommodityInfo.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def quantity_uom(self):
        """Gets the quantity_uom of this CommodityInfo.  # noqa: E501


        :return: The quantity_uom of this CommodityInfo.  # noqa: E501
        :rtype: str
        """
        return self._quantity_uom

    @quantity_uom.setter
    def quantity_uom(self, quantity_uom):
        """Sets the quantity_uom of this CommodityInfo.


        :param quantity_uom: The quantity_uom of this CommodityInfo.  # noqa: E501
        :type: str
        """

        self._quantity_uom = quantity_uom

    @property
    def radio_activity_detail(self):
        """Gets the radio_activity_detail of this CommodityInfo.  # noqa: E501


        :return: The radio_activity_detail of this CommodityInfo.  # noqa: E501
        :rtype: RadioActivityDetail
        """
        return self._radio_activity_detail

    @radio_activity_detail.setter
    def radio_activity_detail(self, radio_activity_detail):
        """Sets the radio_activity_detail of this CommodityInfo.


        :param radio_activity_detail: The radio_activity_detail of this CommodityInfo.  # noqa: E501
        :type: RadioActivityDetail
        """

        self._radio_activity_detail = radio_activity_detail

    @property
    def radio_nuclide_detail(self):
        """Gets the radio_nuclide_detail of this CommodityInfo.  # noqa: E501


        :return: The radio_nuclide_detail of this CommodityInfo.  # noqa: E501
        :rtype: RadioNuclideDetail
        """
        return self._radio_nuclide_detail

    @radio_nuclide_detail.setter
    def radio_nuclide_detail(self, radio_nuclide_detail):
        """Sets the radio_nuclide_detail of this CommodityInfo.


        :param radio_nuclide_detail: The radio_nuclide_detail of this CommodityInfo.  # noqa: E501
        :type: RadioNuclideDetail
        """

        self._radio_nuclide_detail = radio_nuclide_detail

    @property
    def reportable_quantity(self):
        """Gets the reportable_quantity of this CommodityInfo.  # noqa: E501


        :return: The reportable_quantity of this CommodityInfo.  # noqa: E501
        :rtype: bool
        """
        return self._reportable_quantity

    @reportable_quantity.setter
    def reportable_quantity(self, reportable_quantity):
        """Sets the reportable_quantity of this CommodityInfo.


        :param reportable_quantity: The reportable_quantity of this CommodityInfo.  # noqa: E501
        :type: bool
        """

        self._reportable_quantity = reportable_quantity

    @property
    def technical_name(self):
        """Gets the technical_name of this CommodityInfo.  # noqa: E501


        :return: The technical_name of this CommodityInfo.  # noqa: E501
        :rtype: str
        """
        return self._technical_name

    @technical_name.setter
    def technical_name(self, technical_name):
        """Sets the technical_name of this CommodityInfo.


        :param technical_name: The technical_name of this CommodityInfo.  # noqa: E501
        :type: str
        """

        self._technical_name = technical_name

    @property
    def un_id(self):
        """Gets the un_id of this CommodityInfo.  # noqa: E501


        :return: The un_id of this CommodityInfo.  # noqa: E501
        :rtype: str
        """
        return self._un_id

    @un_id.setter
    def un_id(self, un_id):
        """Sets the un_id of this CommodityInfo.


        :param un_id: The un_id of this CommodityInfo.  # noqa: E501
        :type: str
        """

        self._un_id = un_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommodityInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CommodityInfo):
            return True

        return self.to_dict() != other.to_dict()
