# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pitneybowes_shippingapi.configuration import Configuration


class ParcelProtectionQuoteRequestShipmentInfoShipperInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'shipper_id': 'str',
        'address': 'ParcelProtectionQuoteRequestShipmentInfoShipperInfoAddress'
    }

    attribute_map = {
        'shipper_id': 'shipperID',
        'address': 'address'
    }

    def __init__(self, shipper_id=None, address=None, local_vars_configuration=None):  # noqa: E501
        """ParcelProtectionQuoteRequestShipmentInfoShipperInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._shipper_id = None
        self._address = None
        self.discriminator = None

        self.shipper_id = shipper_id
        self.address = address

    @property
    def shipper_id(self):
        """Gets the shipper_id of this ParcelProtectionQuoteRequestShipmentInfoShipperInfo.  # noqa: E501


        :return: The shipper_id of this ParcelProtectionQuoteRequestShipmentInfoShipperInfo.  # noqa: E501
        :rtype: str
        """
        return self._shipper_id

    @shipper_id.setter
    def shipper_id(self, shipper_id):
        """Sets the shipper_id of this ParcelProtectionQuoteRequestShipmentInfoShipperInfo.


        :param shipper_id: The shipper_id of this ParcelProtectionQuoteRequestShipmentInfoShipperInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and shipper_id is None:  # noqa: E501
            raise ValueError("Invalid value for `shipper_id`, must not be `None`")  # noqa: E501

        self._shipper_id = shipper_id

    @property
    def address(self):
        """Gets the address of this ParcelProtectionQuoteRequestShipmentInfoShipperInfo.  # noqa: E501


        :return: The address of this ParcelProtectionQuoteRequestShipmentInfoShipperInfo.  # noqa: E501
        :rtype: ParcelProtectionQuoteRequestShipmentInfoShipperInfoAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ParcelProtectionQuoteRequestShipmentInfoShipperInfo.


        :param address: The address of this ParcelProtectionQuoteRequestShipmentInfoShipperInfo.  # noqa: E501
        :type: ParcelProtectionQuoteRequestShipmentInfoShipperInfoAddress
        """
        if self.local_vars_configuration.client_side_validation and address is None:  # noqa: E501
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParcelProtectionQuoteRequestShipmentInfoShipperInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ParcelProtectionQuoteRequestShipmentInfoShipperInfo):
            return True

        return self.to_dict() != other.to_dict()
