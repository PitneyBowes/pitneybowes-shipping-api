# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pitneybowes_shippingapi.configuration import Configuration


class Document(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'content_type': 'str',
        'contents': 'str',
        'doc_tab': 'list[DocTabItem]',
        'file_format': 'str',
        'pages': 'list[DocumentPage]',
        'print_dialog_option': 'str',
        'resolution': 'str',
        'size': 'str',
        'type': 'str'
    }

    attribute_map = {
        'content_type': 'contentType',
        'contents': 'contents',
        'doc_tab': 'docTab',
        'file_format': 'fileFormat',
        'pages': 'pages',
        'print_dialog_option': 'printDialogOption',
        'resolution': 'resolution',
        'size': 'size',
        'type': 'type'
    }

    def __init__(self, content_type=None, contents=None, doc_tab=None, file_format=None, pages=None, print_dialog_option=None, resolution=None, size=None, type=None, local_vars_configuration=None):  # noqa: E501
        """Document - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._content_type = None
        self._contents = None
        self._doc_tab = None
        self._file_format = None
        self._pages = None
        self._print_dialog_option = None
        self._resolution = None
        self._size = None
        self._type = None
        self.discriminator = None

        if content_type is not None:
            self.content_type = content_type
        if contents is not None:
            self.contents = contents
        if doc_tab is not None:
            self.doc_tab = doc_tab
        if file_format is not None:
            self.file_format = file_format
        if pages is not None:
            self.pages = pages
        if print_dialog_option is not None:
            self.print_dialog_option = print_dialog_option
        if resolution is not None:
            self.resolution = resolution
        if size is not None:
            self.size = size
        self.type = type

    @property
    def content_type(self):
        """Gets the content_type of this Document.  # noqa: E501


        :return: The content_type of this Document.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Document.


        :param content_type: The content_type of this Document.  # noqa: E501
        :type: str
        """
        allowed_values = ["URL", "BASE64"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and content_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `content_type` ({0}), must be one of {1}"  # noqa: E501
                .format(content_type, allowed_values)
            )

        self._content_type = content_type

    @property
    def contents(self):
        """Gets the contents of this Document.  # noqa: E501


        :return: The contents of this Document.  # noqa: E501
        :rtype: str
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this Document.


        :param contents: The contents of this Document.  # noqa: E501
        :type: str
        """

        self._contents = contents

    @property
    def doc_tab(self):
        """Gets the doc_tab of this Document.  # noqa: E501


        :return: The doc_tab of this Document.  # noqa: E501
        :rtype: list[DocTabItem]
        """
        return self._doc_tab

    @doc_tab.setter
    def doc_tab(self, doc_tab):
        """Sets the doc_tab of this Document.


        :param doc_tab: The doc_tab of this Document.  # noqa: E501
        :type: list[DocTabItem]
        """

        self._doc_tab = doc_tab

    @property
    def file_format(self):
        """Gets the file_format of this Document.  # noqa: E501


        :return: The file_format of this Document.  # noqa: E501
        :rtype: str
        """
        return self._file_format

    @file_format.setter
    def file_format(self, file_format):
        """Sets the file_format of this Document.


        :param file_format: The file_format of this Document.  # noqa: E501
        :type: str
        """
        allowed_values = ["PDF", "PNG", "GIF", "ZPL", "ZPL2"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and file_format not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `file_format` ({0}), must be one of {1}"  # noqa: E501
                .format(file_format, allowed_values)
            )

        self._file_format = file_format

    @property
    def pages(self):
        """Gets the pages of this Document.  # noqa: E501


        :return: The pages of this Document.  # noqa: E501
        :rtype: list[DocumentPage]
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this Document.


        :param pages: The pages of this Document.  # noqa: E501
        :type: list[DocumentPage]
        """

        self._pages = pages

    @property
    def print_dialog_option(self):
        """Gets the print_dialog_option of this Document.  # noqa: E501


        :return: The print_dialog_option of this Document.  # noqa: E501
        :rtype: str
        """
        return self._print_dialog_option

    @print_dialog_option.setter
    def print_dialog_option(self, print_dialog_option):
        """Sets the print_dialog_option of this Document.


        :param print_dialog_option: The print_dialog_option of this Document.  # noqa: E501
        :type: str
        """
        allowed_values = ["NO_PRINT_DIALOG", "EMBED_PRINT_DIALOG"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and print_dialog_option not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `print_dialog_option` ({0}), must be one of {1}"  # noqa: E501
                .format(print_dialog_option, allowed_values)
            )

        self._print_dialog_option = print_dialog_option

    @property
    def resolution(self):
        """Gets the resolution of this Document.  # noqa: E501


        :return: The resolution of this Document.  # noqa: E501
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this Document.


        :param resolution: The resolution of this Document.  # noqa: E501
        :type: str
        """
        allowed_values = ["DPI_300", "DPI_203", "DPI_150"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and resolution not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `resolution` ({0}), must be one of {1}"  # noqa: E501
                .format(resolution, allowed_values)
            )

        self._resolution = resolution

    @property
    def size(self):
        """Gets the size of this Document.  # noqa: E501


        :return: The size of this Document.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Document.


        :param size: The size of this Document.  # noqa: E501
        :type: str
        """
        allowed_values = ["DOC_2X7", "DOC_4X1", "DOC_4X3", "DOC_4X6", "DOC_4X8", "DOC_6X4", "DOC_8X11", "DOC_9X4", "DOC_4X5", "DOC_8_5X5_5"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and size not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `size` ({0}), must be one of {1}"  # noqa: E501
                .format(size, allowed_values)
            )

        self._size = size

    @property
    def type(self):
        """Gets the type of this Document.  # noqa: E501


        :return: The type of this Document.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Document.


        :param type: The type of this Document.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Document):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Document):
            return True

        return self.to_dict() != other.to_dict()
