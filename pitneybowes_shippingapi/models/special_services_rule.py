# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pitneybowes_shippingapi.configuration import Configuration


class SpecialServicesRule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'special_service_id': 'SpecialServiceCodes',
        'branded_name': 'str',
        'category_id': 'str',
        'category_name': 'str',
        'trackable': 'bool',
        'input_parameter_rules': 'list[ServicesParameterRule]',
        'prerequisite_rules': 'list[PrerequisiteRules]',
        'incompatible_special_services': 'SpecialServiceCodes'
    }

    attribute_map = {
        'special_service_id': 'specialServiceId',
        'branded_name': 'brandedName',
        'category_id': 'categoryId',
        'category_name': 'categoryName',
        'trackable': 'trackable',
        'input_parameter_rules': 'inputParameterRules',
        'prerequisite_rules': 'prerequisiteRules',
        'incompatible_special_services': 'incompatibleSpecialServices'
    }

    def __init__(self, special_service_id=None, branded_name=None, category_id=None, category_name=None, trackable=None, input_parameter_rules=None, prerequisite_rules=None, incompatible_special_services=None, local_vars_configuration=None):  # noqa: E501
        """SpecialServicesRule - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._special_service_id = None
        self._branded_name = None
        self._category_id = None
        self._category_name = None
        self._trackable = None
        self._input_parameter_rules = None
        self._prerequisite_rules = None
        self._incompatible_special_services = None
        self.discriminator = None

        if special_service_id is not None:
            self.special_service_id = special_service_id
        if branded_name is not None:
            self.branded_name = branded_name
        if category_id is not None:
            self.category_id = category_id
        if category_name is not None:
            self.category_name = category_name
        if trackable is not None:
            self.trackable = trackable
        if input_parameter_rules is not None:
            self.input_parameter_rules = input_parameter_rules
        if prerequisite_rules is not None:
            self.prerequisite_rules = prerequisite_rules
        if incompatible_special_services is not None:
            self.incompatible_special_services = incompatible_special_services

    @property
    def special_service_id(self):
        """Gets the special_service_id of this SpecialServicesRule.  # noqa: E501


        :return: The special_service_id of this SpecialServicesRule.  # noqa: E501
        :rtype: SpecialServiceCodes
        """
        return self._special_service_id

    @special_service_id.setter
    def special_service_id(self, special_service_id):
        """Sets the special_service_id of this SpecialServicesRule.


        :param special_service_id: The special_service_id of this SpecialServicesRule.  # noqa: E501
        :type: SpecialServiceCodes
        """

        self._special_service_id = special_service_id

    @property
    def branded_name(self):
        """Gets the branded_name of this SpecialServicesRule.  # noqa: E501


        :return: The branded_name of this SpecialServicesRule.  # noqa: E501
        :rtype: str
        """
        return self._branded_name

    @branded_name.setter
    def branded_name(self, branded_name):
        """Sets the branded_name of this SpecialServicesRule.


        :param branded_name: The branded_name of this SpecialServicesRule.  # noqa: E501
        :type: str
        """

        self._branded_name = branded_name

    @property
    def category_id(self):
        """Gets the category_id of this SpecialServicesRule.  # noqa: E501


        :return: The category_id of this SpecialServicesRule.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this SpecialServicesRule.


        :param category_id: The category_id of this SpecialServicesRule.  # noqa: E501
        :type: str
        """

        self._category_id = category_id

    @property
    def category_name(self):
        """Gets the category_name of this SpecialServicesRule.  # noqa: E501


        :return: The category_name of this SpecialServicesRule.  # noqa: E501
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this SpecialServicesRule.


        :param category_name: The category_name of this SpecialServicesRule.  # noqa: E501
        :type: str
        """

        self._category_name = category_name

    @property
    def trackable(self):
        """Gets the trackable of this SpecialServicesRule.  # noqa: E501


        :return: The trackable of this SpecialServicesRule.  # noqa: E501
        :rtype: bool
        """
        return self._trackable

    @trackable.setter
    def trackable(self, trackable):
        """Sets the trackable of this SpecialServicesRule.


        :param trackable: The trackable of this SpecialServicesRule.  # noqa: E501
        :type: bool
        """

        self._trackable = trackable

    @property
    def input_parameter_rules(self):
        """Gets the input_parameter_rules of this SpecialServicesRule.  # noqa: E501


        :return: The input_parameter_rules of this SpecialServicesRule.  # noqa: E501
        :rtype: list[ServicesParameterRule]
        """
        return self._input_parameter_rules

    @input_parameter_rules.setter
    def input_parameter_rules(self, input_parameter_rules):
        """Sets the input_parameter_rules of this SpecialServicesRule.


        :param input_parameter_rules: The input_parameter_rules of this SpecialServicesRule.  # noqa: E501
        :type: list[ServicesParameterRule]
        """

        self._input_parameter_rules = input_parameter_rules

    @property
    def prerequisite_rules(self):
        """Gets the prerequisite_rules of this SpecialServicesRule.  # noqa: E501


        :return: The prerequisite_rules of this SpecialServicesRule.  # noqa: E501
        :rtype: list[PrerequisiteRules]
        """
        return self._prerequisite_rules

    @prerequisite_rules.setter
    def prerequisite_rules(self, prerequisite_rules):
        """Sets the prerequisite_rules of this SpecialServicesRule.


        :param prerequisite_rules: The prerequisite_rules of this SpecialServicesRule.  # noqa: E501
        :type: list[PrerequisiteRules]
        """

        self._prerequisite_rules = prerequisite_rules

    @property
    def incompatible_special_services(self):
        """Gets the incompatible_special_services of this SpecialServicesRule.  # noqa: E501


        :return: The incompatible_special_services of this SpecialServicesRule.  # noqa: E501
        :rtype: SpecialServiceCodes
        """
        return self._incompatible_special_services

    @incompatible_special_services.setter
    def incompatible_special_services(self, incompatible_special_services):
        """Sets the incompatible_special_services of this SpecialServicesRule.


        :param incompatible_special_services: The incompatible_special_services of this SpecialServicesRule.  # noqa: E501
        :type: SpecialServiceCodes
        """

        self._incompatible_special_services = incompatible_special_services

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpecialServicesRule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SpecialServicesRule):
            return True

        return self.to_dict() != other.to_dict()
