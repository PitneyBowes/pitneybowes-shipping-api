# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pitneybowes_shippingapi.configuration import Configuration


class RadioActivityDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'criticality_safety_index': 'float',
        'radio_active_parcel_dimension': 'RadioActiveParcelDimension',
        'surface_reading': 'float',
        'transport_index': 'float'
    }

    attribute_map = {
        'criticality_safety_index': 'criticalitySafetyIndex',
        'radio_active_parcel_dimension': 'radioActiveParcelDimension',
        'surface_reading': 'surfaceReading',
        'transport_index': 'transportIndex'
    }

    def __init__(self, criticality_safety_index=None, radio_active_parcel_dimension=None, surface_reading=None, transport_index=None, local_vars_configuration=None):  # noqa: E501
        """RadioActivityDetail - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._criticality_safety_index = None
        self._radio_active_parcel_dimension = None
        self._surface_reading = None
        self._transport_index = None
        self.discriminator = None

        if criticality_safety_index is not None:
            self.criticality_safety_index = criticality_safety_index
        if radio_active_parcel_dimension is not None:
            self.radio_active_parcel_dimension = radio_active_parcel_dimension
        if surface_reading is not None:
            self.surface_reading = surface_reading
        if transport_index is not None:
            self.transport_index = transport_index

    @property
    def criticality_safety_index(self):
        """Gets the criticality_safety_index of this RadioActivityDetail.  # noqa: E501


        :return: The criticality_safety_index of this RadioActivityDetail.  # noqa: E501
        :rtype: float
        """
        return self._criticality_safety_index

    @criticality_safety_index.setter
    def criticality_safety_index(self, criticality_safety_index):
        """Sets the criticality_safety_index of this RadioActivityDetail.


        :param criticality_safety_index: The criticality_safety_index of this RadioActivityDetail.  # noqa: E501
        :type: float
        """

        self._criticality_safety_index = criticality_safety_index

    @property
    def radio_active_parcel_dimension(self):
        """Gets the radio_active_parcel_dimension of this RadioActivityDetail.  # noqa: E501


        :return: The radio_active_parcel_dimension of this RadioActivityDetail.  # noqa: E501
        :rtype: RadioActiveParcelDimension
        """
        return self._radio_active_parcel_dimension

    @radio_active_parcel_dimension.setter
    def radio_active_parcel_dimension(self, radio_active_parcel_dimension):
        """Sets the radio_active_parcel_dimension of this RadioActivityDetail.


        :param radio_active_parcel_dimension: The radio_active_parcel_dimension of this RadioActivityDetail.  # noqa: E501
        :type: RadioActiveParcelDimension
        """

        self._radio_active_parcel_dimension = radio_active_parcel_dimension

    @property
    def surface_reading(self):
        """Gets the surface_reading of this RadioActivityDetail.  # noqa: E501


        :return: The surface_reading of this RadioActivityDetail.  # noqa: E501
        :rtype: float
        """
        return self._surface_reading

    @surface_reading.setter
    def surface_reading(self, surface_reading):
        """Sets the surface_reading of this RadioActivityDetail.


        :param surface_reading: The surface_reading of this RadioActivityDetail.  # noqa: E501
        :type: float
        """

        self._surface_reading = surface_reading

    @property
    def transport_index(self):
        """Gets the transport_index of this RadioActivityDetail.  # noqa: E501


        :return: The transport_index of this RadioActivityDetail.  # noqa: E501
        :rtype: float
        """
        return self._transport_index

    @transport_index.setter
    def transport_index(self, transport_index):
        """Sets the transport_index of this RadioActivityDetail.


        :param transport_index: The transport_index of this RadioActivityDetail.  # noqa: E501
        :type: float
        """

        self._transport_index = transport_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RadioActivityDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RadioActivityDetail):
            return True

        return self.to_dict() != other.to_dict()
