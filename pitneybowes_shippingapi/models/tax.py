# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pitneybowes_shippingapi.configuration import Configuration


class Tax(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'display_name': 'str',
        'name': 'str',
        'tax_amount': 'float',
        'tax_rate': 'float'
    }

    attribute_map = {
        'display_name': 'displayName',
        'name': 'name',
        'tax_amount': 'taxAmount',
        'tax_rate': 'taxRate'
    }

    def __init__(self, display_name=None, name=None, tax_amount=None, tax_rate=None, local_vars_configuration=None):  # noqa: E501
        """Tax - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._display_name = None
        self._name = None
        self._tax_amount = None
        self._tax_rate = None
        self.discriminator = None

        if display_name is not None:
            self.display_name = display_name
        if name is not None:
            self.name = name
        if tax_amount is not None:
            self.tax_amount = tax_amount
        if tax_rate is not None:
            self.tax_rate = tax_rate

    @property
    def display_name(self):
        """Gets the display_name of this Tax.  # noqa: E501


        :return: The display_name of this Tax.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Tax.


        :param display_name: The display_name of this Tax.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def name(self):
        """Gets the name of this Tax.  # noqa: E501


        :return: The name of this Tax.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Tax.


        :param name: The name of this Tax.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def tax_amount(self):
        """Gets the tax_amount of this Tax.  # noqa: E501


        :return: The tax_amount of this Tax.  # noqa: E501
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this Tax.


        :param tax_amount: The tax_amount of this Tax.  # noqa: E501
        :type: float
        """

        self._tax_amount = tax_amount

    @property
    def tax_rate(self):
        """Gets the tax_rate of this Tax.  # noqa: E501


        :return: The tax_rate of this Tax.  # noqa: E501
        :rtype: float
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this Tax.


        :param tax_rate: The tax_rate of this Tax.  # noqa: E501
        :type: float
        """

        self._tax_rate = tax_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tax):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Tax):
            return True

        return self.to_dict() != other.to_dict()
