# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pitneybowes_shippingapi.configuration import Configuration


class SpecialService(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'fee': 'float',
        'input_parameters': 'list[Parameter]',
        'special_service_id': 'str'
    }

    attribute_map = {
        'fee': 'fee',
        'input_parameters': 'inputParameters',
        'special_service_id': 'specialServiceId'
    }

    def __init__(self, fee=None, input_parameters=None, special_service_id=None, local_vars_configuration=None):  # noqa: E501
        """SpecialService - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._fee = None
        self._input_parameters = None
        self._special_service_id = None
        self.discriminator = None

        if fee is not None:
            self.fee = fee
        if input_parameters is not None:
            self.input_parameters = input_parameters
        self.special_service_id = special_service_id

    @property
    def fee(self):
        """Gets the fee of this SpecialService.  # noqa: E501


        :return: The fee of this SpecialService.  # noqa: E501
        :rtype: float
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this SpecialService.


        :param fee: The fee of this SpecialService.  # noqa: E501
        :type: float
        """

        self._fee = fee

    @property
    def input_parameters(self):
        """Gets the input_parameters of this SpecialService.  # noqa: E501


        :return: The input_parameters of this SpecialService.  # noqa: E501
        :rtype: list[Parameter]
        """
        return self._input_parameters

    @input_parameters.setter
    def input_parameters(self, input_parameters):
        """Sets the input_parameters of this SpecialService.


        :param input_parameters: The input_parameters of this SpecialService.  # noqa: E501
        :type: list[Parameter]
        """

        self._input_parameters = input_parameters

    @property
    def special_service_id(self):
        """Gets the special_service_id of this SpecialService.  # noqa: E501


        :return: The special_service_id of this SpecialService.  # noqa: E501
        :rtype: str
        """
        return self._special_service_id

    @special_service_id.setter
    def special_service_id(self, special_service_id):
        """Sets the special_service_id of this SpecialService.


        :param special_service_id: The special_service_id of this SpecialService.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and special_service_id is None:  # noqa: E501
            raise ValueError("Invalid value for `special_service_id`, must not be `None`")  # noqa: E501

        self._special_service_id = special_service_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpecialService):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SpecialService):
            return True

        return self.to_dict() != other.to_dict()
