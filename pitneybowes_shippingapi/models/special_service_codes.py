# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pitneybowes_shippingapi.configuration import Configuration


class SpecialServiceCodes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    ADSIG = "ADSIG"
    ADSIGRD = "ADSIGRD"
    CERT = "Cert"
    CERTAD = "CERTAD"
    CERTADRD = "CERTADRD"
    CERTRD = "CertRD"
    COD = "COD"
    CODRD = "CODRD"
    DELCON = "DelCon"
    ERR = "ERR"
    HAZMAT = "hazmat"
    HOLIDAY = "holiday"
    INSRD = "InsRD"
    LIVEANIMAL = "liveanimal"
    LIVEANIMAL_POULTRY = "liveanimal - poultry"
    PMOD_OPTIONS = "PMOD_OPTIONS"
    REG = "Reg"
    REGCOD = "RegCOD"
    REGINS = "RegIns"
    REGINSRD = "RegInsRD"
    REGRD = "RegRD"
    RR = "RR"
    RRM = "RRM"
    SH = "SH"
    SIG = "SIG"
    SIGRD = "SigRD"
    SUNDAY = "sunday"
    SUNDAY_HOLIDAY = "sunday - holiday"
    NOTIFICATIONS = "NOTIFICATIONS"
    PBXPS = "PBXPS"
    PBXUS = "PBXUS"
    PBXPE = "PBXPE"
    ANCILLARY_ENDORSEMENT = "ANCILLARY_ENDORSEMENT"
    ADD_HDL = "ADD_HDL"
    ALCOHOL = "ALCOHOL"
    CARRIER_LEAVE_IF_NO_RES = "CARRIER_LEAVE_IF_NO_RES"
    DIRECT_SIG = "DIRECT_SIG"
    APPOINTMENT = "APPOINTMENT"
    DATE = "DATE"
    EVENING = "EVENING"
    GCOD = "GCOD"
    PAL = "PAL"
    PAL_PLUS = "PAL_PLUS"
    SAT_DELIVERY = "SAT_DELIVERY"
    SAT_PICKUP = "SAT_PICKUP"
    HOLD = "HOLD"
    NO_SIG = "NO_SIG"
    PRL = "PRL"
    ADULT_SIG = "ADULT_SIG"
    CARBON = "CARBON"
    COD_CASHIER = "COD_CASHIER"
    COD_CHECK = "COD_CHECK"
    DEL_CON = "DEL_CON"
    DIRECT = "DIRECT"
    DRY_ICE = "DRY_ICE"
    INS = "INS"
    SHP_RELEASE = "SHP_RELEASE"
    VERBAL = "VERBAL"

    allowable_values = [ADSIG, ADSIGRD, CERT, CERTAD, CERTADRD, CERTRD, COD, CODRD, DELCON, ERR, HAZMAT, HOLIDAY, INSRD, LIVEANIMAL, LIVEANIMAL_POULTRY, PMOD_OPTIONS, REG, REGCOD, REGINS, REGINSRD, REGRD, RR, RRM, SH, SIG, SIGRD, SUNDAY, SUNDAY_HOLIDAY, NOTIFICATIONS, PBXPS, PBXUS, PBXPE, ANCILLARY_ENDORSEMENT, ADD_HDL, ALCOHOL, CARRIER_LEAVE_IF_NO_RES, DIRECT_SIG, APPOINTMENT, DATE, EVENING, GCOD, PAL, PAL_PLUS, SAT_DELIVERY, SAT_PICKUP, HOLD, NO_SIG, PRL, ADULT_SIG, CARBON, COD_CASHIER, COD_CHECK, DEL_CON, DIRECT, DRY_ICE, INS, SHP_RELEASE, VERBAL]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """SpecialServiceCodes - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpecialServiceCodes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SpecialServiceCodes):
            return True

        return self.to_dict() != other.to_dict()
