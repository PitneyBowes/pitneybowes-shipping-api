# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pitneybowes_shippingapi.configuration import Configuration


class BatteryDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'battery_material': 'str',
        'battery_packaging': 'str',
        'regulatory': 'str'
    }

    attribute_map = {
        'battery_material': 'batteryMaterial',
        'battery_packaging': 'batteryPackaging',
        'regulatory': 'regulatory'
    }

    def __init__(self, battery_material=None, battery_packaging=None, regulatory=None, local_vars_configuration=None):  # noqa: E501
        """BatteryDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._battery_material = None
        self._battery_packaging = None
        self._regulatory = None
        self.discriminator = None

        if battery_material is not None:
            self.battery_material = battery_material
        if battery_packaging is not None:
            self.battery_packaging = battery_packaging
        if regulatory is not None:
            self.regulatory = regulatory

    @property
    def battery_material(self):
        """Gets the battery_material of this BatteryDetails.  # noqa: E501


        :return: The battery_material of this BatteryDetails.  # noqa: E501
        :rtype: str
        """
        return self._battery_material

    @battery_material.setter
    def battery_material(self, battery_material):
        """Sets the battery_material of this BatteryDetails.


        :param battery_material: The battery_material of this BatteryDetails.  # noqa: E501
        :type: str
        """

        self._battery_material = battery_material

    @property
    def battery_packaging(self):
        """Gets the battery_packaging of this BatteryDetails.  # noqa: E501


        :return: The battery_packaging of this BatteryDetails.  # noqa: E501
        :rtype: str
        """
        return self._battery_packaging

    @battery_packaging.setter
    def battery_packaging(self, battery_packaging):
        """Sets the battery_packaging of this BatteryDetails.


        :param battery_packaging: The battery_packaging of this BatteryDetails.  # noqa: E501
        :type: str
        """

        self._battery_packaging = battery_packaging

    @property
    def regulatory(self):
        """Gets the regulatory of this BatteryDetails.  # noqa: E501


        :return: The regulatory of this BatteryDetails.  # noqa: E501
        :rtype: str
        """
        return self._regulatory

    @regulatory.setter
    def regulatory(self, regulatory):
        """Sets the regulatory of this BatteryDetails.


        :param regulatory: The regulatory of this BatteryDetails.  # noqa: E501
        :type: str
        """

        self._regulatory = regulatory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatteryDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BatteryDetails):
            return True

        return self.to_dict() != other.to_dict()
