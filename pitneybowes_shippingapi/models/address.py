# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pitneybowes_shippingapi.configuration import Configuration


class Address(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address_lines': 'list[str]',
        'carrier_route': 'str',
        'city_town': 'str',
        'company': 'str',
        'country_code': 'str',
        'delivery_point': 'str',
        'email': 'str',
        'name': 'str',
        'phone': 'str',
        'postal_code': 'str',
        'residential': 'bool',
        'state_province': 'str',
        'status': 'str',
        'tax_id': 'str',
        'tax_id_type': 'str'
    }

    attribute_map = {
        'address_lines': 'addressLines',
        'carrier_route': 'carrierRoute',
        'city_town': 'cityTown',
        'company': 'company',
        'country_code': 'countryCode',
        'delivery_point': 'deliveryPoint',
        'email': 'email',
        'name': 'name',
        'phone': 'phone',
        'postal_code': 'postalCode',
        'residential': 'residential',
        'state_province': 'stateProvince',
        'status': 'status',
        'tax_id': 'taxId',
        'tax_id_type': 'taxIdType'
    }

    def __init__(self, address_lines=None, carrier_route=None, city_town=None, company=None, country_code=None, delivery_point=None, email=None, name=None, phone=None, postal_code=None, residential=None, state_province=None, status=None, tax_id=None, tax_id_type=None, local_vars_configuration=None):  # noqa: E501
        """Address - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._address_lines = None
        self._carrier_route = None
        self._city_town = None
        self._company = None
        self._country_code = None
        self._delivery_point = None
        self._email = None
        self._name = None
        self._phone = None
        self._postal_code = None
        self._residential = None
        self._state_province = None
        self._status = None
        self._tax_id = None
        self._tax_id_type = None
        self.discriminator = None

        if address_lines is not None:
            self.address_lines = address_lines
        if carrier_route is not None:
            self.carrier_route = carrier_route
        if city_town is not None:
            self.city_town = city_town
        if company is not None:
            self.company = company
        self.country_code = country_code
        if delivery_point is not None:
            self.delivery_point = delivery_point
        if email is not None:
            self.email = email
        if name is not None:
            self.name = name
        if phone is not None:
            self.phone = phone
        if postal_code is not None:
            self.postal_code = postal_code
        if residential is not None:
            self.residential = residential
        if state_province is not None:
            self.state_province = state_province
        if status is not None:
            self.status = status
        if tax_id is not None:
            self.tax_id = tax_id
        if tax_id_type is not None:
            self.tax_id_type = tax_id_type

    @property
    def address_lines(self):
        """Gets the address_lines of this Address.  # noqa: E501


        :return: The address_lines of this Address.  # noqa: E501
        :rtype: list[str]
        """
        return self._address_lines

    @address_lines.setter
    def address_lines(self, address_lines):
        """Sets the address_lines of this Address.


        :param address_lines: The address_lines of this Address.  # noqa: E501
        :type: list[str]
        """

        self._address_lines = address_lines

    @property
    def carrier_route(self):
        """Gets the carrier_route of this Address.  # noqa: E501


        :return: The carrier_route of this Address.  # noqa: E501
        :rtype: str
        """
        return self._carrier_route

    @carrier_route.setter
    def carrier_route(self, carrier_route):
        """Sets the carrier_route of this Address.


        :param carrier_route: The carrier_route of this Address.  # noqa: E501
        :type: str
        """

        self._carrier_route = carrier_route

    @property
    def city_town(self):
        """Gets the city_town of this Address.  # noqa: E501


        :return: The city_town of this Address.  # noqa: E501
        :rtype: str
        """
        return self._city_town

    @city_town.setter
    def city_town(self, city_town):
        """Sets the city_town of this Address.


        :param city_town: The city_town of this Address.  # noqa: E501
        :type: str
        """

        self._city_town = city_town

    @property
    def company(self):
        """Gets the company of this Address.  # noqa: E501


        :return: The company of this Address.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Address.


        :param company: The company of this Address.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def country_code(self):
        """Gets the country_code of this Address.  # noqa: E501

        2-character country code (ISO-3166-1 alpha-2)  # noqa: E501

        :return: The country_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Address.

        2-character country code (ISO-3166-1 alpha-2)  # noqa: E501

        :param country_code: The country_code of this Address.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and country_code is None:  # noqa: E501
            raise ValueError("Invalid value for `country_code`, must not be `None`")  # noqa: E501

        self._country_code = country_code

    @property
    def delivery_point(self):
        """Gets the delivery_point of this Address.  # noqa: E501


        :return: The delivery_point of this Address.  # noqa: E501
        :rtype: str
        """
        return self._delivery_point

    @delivery_point.setter
    def delivery_point(self, delivery_point):
        """Sets the delivery_point of this Address.


        :param delivery_point: The delivery_point of this Address.  # noqa: E501
        :type: str
        """

        self._delivery_point = delivery_point

    @property
    def email(self):
        """Gets the email of this Address.  # noqa: E501


        :return: The email of this Address.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Address.


        :param email: The email of this Address.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this Address.  # noqa: E501


        :return: The name of this Address.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Address.


        :param name: The name of this Address.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def phone(self):
        """Gets the phone of this Address.  # noqa: E501


        :return: The phone of this Address.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Address.


        :param phone: The phone of this Address.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.  # noqa: E501


        :return: The postal_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.


        :param postal_code: The postal_code of this Address.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def residential(self):
        """Gets the residential of this Address.  # noqa: E501


        :return: The residential of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._residential

    @residential.setter
    def residential(self, residential):
        """Sets the residential of this Address.


        :param residential: The residential of this Address.  # noqa: E501
        :type: bool
        """

        self._residential = residential

    @property
    def state_province(self):
        """Gets the state_province of this Address.  # noqa: E501


        :return: The state_province of this Address.  # noqa: E501
        :rtype: str
        """
        return self._state_province

    @state_province.setter
    def state_province(self, state_province):
        """Sets the state_province of this Address.


        :param state_province: The state_province of this Address.  # noqa: E501
        :type: str
        """

        self._state_province = state_province

    @property
    def status(self):
        """Gets the status of this Address.  # noqa: E501


        :return: The status of this Address.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Address.


        :param status: The status of this Address.  # noqa: E501
        :type: str
        """
        allowed_values = ["PARSED", "VALIDATED_CHANGED", "VALIDATED_AND_NOT_CHANGED", "NOT_CHANGED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tax_id(self):
        """Gets the tax_id of this Address.  # noqa: E501


        :return: The tax_id of this Address.  # noqa: E501
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """Sets the tax_id of this Address.


        :param tax_id: The tax_id of this Address.  # noqa: E501
        :type: str
        """

        self._tax_id = tax_id

    @property
    def tax_id_type(self):
        """Gets the tax_id_type of this Address.  # noqa: E501


        :return: The tax_id_type of this Address.  # noqa: E501
        :rtype: str
        """
        return self._tax_id_type

    @tax_id_type.setter
    def tax_id_type(self, tax_id_type):
        """Sets the tax_id_type of this Address.


        :param tax_id_type: The tax_id_type of this Address.  # noqa: E501
        :type: str
        """
        allowed_values = ["EIN", "GST", "VAT", "RFC", "EORI"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and tax_id_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `tax_id_type` ({0}), must be one of {1}"  # noqa: E501
                .format(tax_id_type, allowed_values)
            )

        self._tax_id_type = tax_id_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Address):
            return True

        return self.to_dict() != other.to_dict()
