# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pitneybowes_shippingapi.configuration import Configuration


class SearchCriteria(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'developer_id': 'str',
        'from_date': 'str',
        'to_date': 'str'
    }

    attribute_map = {
        'developer_id': 'developerId',
        'from_date': 'fromDate',
        'to_date': 'toDate'
    }

    def __init__(self, developer_id=None, from_date=None, to_date=None, local_vars_configuration=None):  # noqa: E501
        """SearchCriteria - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._developer_id = None
        self._from_date = None
        self._to_date = None
        self.discriminator = None

        if developer_id is not None:
            self.developer_id = developer_id
        if from_date is not None:
            self.from_date = from_date
        if to_date is not None:
            self.to_date = to_date

    @property
    def developer_id(self):
        """Gets the developer_id of this SearchCriteria.  # noqa: E501


        :return: The developer_id of this SearchCriteria.  # noqa: E501
        :rtype: str
        """
        return self._developer_id

    @developer_id.setter
    def developer_id(self, developer_id):
        """Sets the developer_id of this SearchCriteria.


        :param developer_id: The developer_id of this SearchCriteria.  # noqa: E501
        :type: str
        """

        self._developer_id = developer_id

    @property
    def from_date(self):
        """Gets the from_date of this SearchCriteria.  # noqa: E501


        :return: The from_date of this SearchCriteria.  # noqa: E501
        :rtype: str
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this SearchCriteria.


        :param from_date: The from_date of this SearchCriteria.  # noqa: E501
        :type: str
        """

        self._from_date = from_date

    @property
    def to_date(self):
        """Gets the to_date of this SearchCriteria.  # noqa: E501


        :return: The to_date of this SearchCriteria.  # noqa: E501
        :rtype: str
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this SearchCriteria.


        :param to_date: The to_date of this SearchCriteria.  # noqa: E501
        :type: str
        """

        self._to_date = to_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchCriteria):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SearchCriteria):
            return True

        return self.to_dict() != other.to_dict()
