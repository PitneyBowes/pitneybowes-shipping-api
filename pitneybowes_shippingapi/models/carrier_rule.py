# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pitneybowes_shippingapi.configuration import Configuration


class CarrierRule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'service_id': 'Services',
        'branded_name': 'str',
        'parcel_type_rules': 'list[ParcelTypeRules]',
        'parameters': 'list[str]'
    }

    attribute_map = {
        'service_id': 'serviceId',
        'branded_name': 'brandedName',
        'parcel_type_rules': 'parcelTypeRules',
        'parameters': 'parameters'
    }

    def __init__(self, service_id=None, branded_name=None, parcel_type_rules=None, parameters=None, local_vars_configuration=None):  # noqa: E501
        """CarrierRule - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._service_id = None
        self._branded_name = None
        self._parcel_type_rules = None
        self._parameters = None
        self.discriminator = None

        if service_id is not None:
            self.service_id = service_id
        if branded_name is not None:
            self.branded_name = branded_name
        if parcel_type_rules is not None:
            self.parcel_type_rules = parcel_type_rules
        if parameters is not None:
            self.parameters = parameters

    @property
    def service_id(self):
        """Gets the service_id of this CarrierRule.  # noqa: E501


        :return: The service_id of this CarrierRule.  # noqa: E501
        :rtype: Services
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this CarrierRule.


        :param service_id: The service_id of this CarrierRule.  # noqa: E501
        :type: Services
        """

        self._service_id = service_id

    @property
    def branded_name(self):
        """Gets the branded_name of this CarrierRule.  # noqa: E501


        :return: The branded_name of this CarrierRule.  # noqa: E501
        :rtype: str
        """
        return self._branded_name

    @branded_name.setter
    def branded_name(self, branded_name):
        """Sets the branded_name of this CarrierRule.


        :param branded_name: The branded_name of this CarrierRule.  # noqa: E501
        :type: str
        """

        self._branded_name = branded_name

    @property
    def parcel_type_rules(self):
        """Gets the parcel_type_rules of this CarrierRule.  # noqa: E501


        :return: The parcel_type_rules of this CarrierRule.  # noqa: E501
        :rtype: list[ParcelTypeRules]
        """
        return self._parcel_type_rules

    @parcel_type_rules.setter
    def parcel_type_rules(self, parcel_type_rules):
        """Sets the parcel_type_rules of this CarrierRule.


        :param parcel_type_rules: The parcel_type_rules of this CarrierRule.  # noqa: E501
        :type: list[ParcelTypeRules]
        """

        self._parcel_type_rules = parcel_type_rules

    @property
    def parameters(self):
        """Gets the parameters of this CarrierRule.  # noqa: E501


        :return: The parameters of this CarrierRule.  # noqa: E501
        :rtype: list[str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this CarrierRule.


        :param parameters: The parameters of this CarrierRule.  # noqa: E501
        :type: list[str]
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CarrierRule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CarrierRule):
            return True

        return self.to_dict() != other.to_dict()
