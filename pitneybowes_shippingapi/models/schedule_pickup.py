# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pitneybowes_shippingapi.configuration import Configuration


class SchedulePickup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pickup_address': 'Address',
        'carrier': 'str',
        'pickup_summary': 'list[SchedulePickupPickupSummary]',
        'reference': 'str',
        'package_location': 'str',
        'special_instructions': 'str'
    }

    attribute_map = {
        'pickup_address': 'pickupAddress',
        'carrier': 'carrier',
        'pickup_summary': 'pickupSummary',
        'reference': 'reference',
        'package_location': 'packageLocation',
        'special_instructions': 'specialInstructions'
    }

    def __init__(self, pickup_address=None, carrier=None, pickup_summary=None, reference=None, package_location=None, special_instructions=None, local_vars_configuration=None):  # noqa: E501
        """SchedulePickup - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pickup_address = None
        self._carrier = None
        self._pickup_summary = None
        self._reference = None
        self._package_location = None
        self._special_instructions = None
        self.discriminator = None

        if pickup_address is not None:
            self.pickup_address = pickup_address
        if carrier is not None:
            self.carrier = carrier
        if pickup_summary is not None:
            self.pickup_summary = pickup_summary
        if reference is not None:
            self.reference = reference
        if package_location is not None:
            self.package_location = package_location
        if special_instructions is not None:
            self.special_instructions = special_instructions

    @property
    def pickup_address(self):
        """Gets the pickup_address of this SchedulePickup.  # noqa: E501


        :return: The pickup_address of this SchedulePickup.  # noqa: E501
        :rtype: Address
        """
        return self._pickup_address

    @pickup_address.setter
    def pickup_address(self, pickup_address):
        """Sets the pickup_address of this SchedulePickup.


        :param pickup_address: The pickup_address of this SchedulePickup.  # noqa: E501
        :type: Address
        """

        self._pickup_address = pickup_address

    @property
    def carrier(self):
        """Gets the carrier of this SchedulePickup.  # noqa: E501


        :return: The carrier of this SchedulePickup.  # noqa: E501
        :rtype: str
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this SchedulePickup.


        :param carrier: The carrier of this SchedulePickup.  # noqa: E501
        :type: str
        """

        self._carrier = carrier

    @property
    def pickup_summary(self):
        """Gets the pickup_summary of this SchedulePickup.  # noqa: E501


        :return: The pickup_summary of this SchedulePickup.  # noqa: E501
        :rtype: list[SchedulePickupPickupSummary]
        """
        return self._pickup_summary

    @pickup_summary.setter
    def pickup_summary(self, pickup_summary):
        """Sets the pickup_summary of this SchedulePickup.


        :param pickup_summary: The pickup_summary of this SchedulePickup.  # noqa: E501
        :type: list[SchedulePickupPickupSummary]
        """

        self._pickup_summary = pickup_summary

    @property
    def reference(self):
        """Gets the reference of this SchedulePickup.  # noqa: E501


        :return: The reference of this SchedulePickup.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this SchedulePickup.


        :param reference: The reference of this SchedulePickup.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def package_location(self):
        """Gets the package_location of this SchedulePickup.  # noqa: E501


        :return: The package_location of this SchedulePickup.  # noqa: E501
        :rtype: str
        """
        return self._package_location

    @package_location.setter
    def package_location(self, package_location):
        """Sets the package_location of this SchedulePickup.


        :param package_location: The package_location of this SchedulePickup.  # noqa: E501
        :type: str
        """

        self._package_location = package_location

    @property
    def special_instructions(self):
        """Gets the special_instructions of this SchedulePickup.  # noqa: E501


        :return: The special_instructions of this SchedulePickup.  # noqa: E501
        :rtype: str
        """
        return self._special_instructions

    @special_instructions.setter
    def special_instructions(self, special_instructions):
        """Sets the special_instructions of this SchedulePickup.


        :param special_instructions: The special_instructions of this SchedulePickup.  # noqa: E501
        :type: str
        """

        self._special_instructions = special_instructions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchedulePickup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SchedulePickup):
            return True

        return self.to_dict() != other.to_dict()
