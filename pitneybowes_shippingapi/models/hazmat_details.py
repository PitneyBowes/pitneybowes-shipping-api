# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pitneybowes_shippingapi.configuration import Configuration


class HazmatDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'battery_details': 'BatteryDetails',
        'commodity_type': 'str',
        'container_count': 'int',
        'container_details': 'list[ContainerDetails]',
        'emergency_contact_number': 'str',
        'hazmat_document_type': 'str',
        'identical_containers': 'bool',
        'offeror': 'str',
        'packaging_option': 'str',
        'signatory': 'Signatory'
    }

    attribute_map = {
        'battery_details': 'batteryDetails',
        'commodity_type': 'commodityType',
        'container_count': 'containerCount',
        'container_details': 'containerDetails',
        'emergency_contact_number': 'emergencyContactNumber',
        'hazmat_document_type': 'hazmatDocumentType',
        'identical_containers': 'identicalContainers',
        'offeror': 'offeror',
        'packaging_option': 'packagingOption',
        'signatory': 'signatory'
    }

    def __init__(self, battery_details=None, commodity_type=None, container_count=None, container_details=None, emergency_contact_number=None, hazmat_document_type=None, identical_containers=None, offeror=None, packaging_option=None, signatory=None, local_vars_configuration=None):  # noqa: E501
        """HazmatDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._battery_details = None
        self._commodity_type = None
        self._container_count = None
        self._container_details = None
        self._emergency_contact_number = None
        self._hazmat_document_type = None
        self._identical_containers = None
        self._offeror = None
        self._packaging_option = None
        self._signatory = None
        self.discriminator = None

        if battery_details is not None:
            self.battery_details = battery_details
        if commodity_type is not None:
            self.commodity_type = commodity_type
        if container_count is not None:
            self.container_count = container_count
        if container_details is not None:
            self.container_details = container_details
        if emergency_contact_number is not None:
            self.emergency_contact_number = emergency_contact_number
        if hazmat_document_type is not None:
            self.hazmat_document_type = hazmat_document_type
        if identical_containers is not None:
            self.identical_containers = identical_containers
        if offeror is not None:
            self.offeror = offeror
        if packaging_option is not None:
            self.packaging_option = packaging_option
        if signatory is not None:
            self.signatory = signatory

    @property
    def battery_details(self):
        """Gets the battery_details of this HazmatDetails.  # noqa: E501


        :return: The battery_details of this HazmatDetails.  # noqa: E501
        :rtype: BatteryDetails
        """
        return self._battery_details

    @battery_details.setter
    def battery_details(self, battery_details):
        """Sets the battery_details of this HazmatDetails.


        :param battery_details: The battery_details of this HazmatDetails.  # noqa: E501
        :type: BatteryDetails
        """

        self._battery_details = battery_details

    @property
    def commodity_type(self):
        """Gets the commodity_type of this HazmatDetails.  # noqa: E501


        :return: The commodity_type of this HazmatDetails.  # noqa: E501
        :rtype: str
        """
        return self._commodity_type

    @commodity_type.setter
    def commodity_type(self, commodity_type):
        """Sets the commodity_type of this HazmatDetails.


        :param commodity_type: The commodity_type of this HazmatDetails.  # noqa: E501
        :type: str
        """

        self._commodity_type = commodity_type

    @property
    def container_count(self):
        """Gets the container_count of this HazmatDetails.  # noqa: E501


        :return: The container_count of this HazmatDetails.  # noqa: E501
        :rtype: int
        """
        return self._container_count

    @container_count.setter
    def container_count(self, container_count):
        """Sets the container_count of this HazmatDetails.


        :param container_count: The container_count of this HazmatDetails.  # noqa: E501
        :type: int
        """

        self._container_count = container_count

    @property
    def container_details(self):
        """Gets the container_details of this HazmatDetails.  # noqa: E501


        :return: The container_details of this HazmatDetails.  # noqa: E501
        :rtype: list[ContainerDetails]
        """
        return self._container_details

    @container_details.setter
    def container_details(self, container_details):
        """Sets the container_details of this HazmatDetails.


        :param container_details: The container_details of this HazmatDetails.  # noqa: E501
        :type: list[ContainerDetails]
        """

        self._container_details = container_details

    @property
    def emergency_contact_number(self):
        """Gets the emergency_contact_number of this HazmatDetails.  # noqa: E501


        :return: The emergency_contact_number of this HazmatDetails.  # noqa: E501
        :rtype: str
        """
        return self._emergency_contact_number

    @emergency_contact_number.setter
    def emergency_contact_number(self, emergency_contact_number):
        """Sets the emergency_contact_number of this HazmatDetails.


        :param emergency_contact_number: The emergency_contact_number of this HazmatDetails.  # noqa: E501
        :type: str
        """

        self._emergency_contact_number = emergency_contact_number

    @property
    def hazmat_document_type(self):
        """Gets the hazmat_document_type of this HazmatDetails.  # noqa: E501


        :return: The hazmat_document_type of this HazmatDetails.  # noqa: E501
        :rtype: str
        """
        return self._hazmat_document_type

    @hazmat_document_type.setter
    def hazmat_document_type(self, hazmat_document_type):
        """Sets the hazmat_document_type of this HazmatDetails.


        :param hazmat_document_type: The hazmat_document_type of this HazmatDetails.  # noqa: E501
        :type: str
        """

        self._hazmat_document_type = hazmat_document_type

    @property
    def identical_containers(self):
        """Gets the identical_containers of this HazmatDetails.  # noqa: E501


        :return: The identical_containers of this HazmatDetails.  # noqa: E501
        :rtype: bool
        """
        return self._identical_containers

    @identical_containers.setter
    def identical_containers(self, identical_containers):
        """Sets the identical_containers of this HazmatDetails.


        :param identical_containers: The identical_containers of this HazmatDetails.  # noqa: E501
        :type: bool
        """

        self._identical_containers = identical_containers

    @property
    def offeror(self):
        """Gets the offeror of this HazmatDetails.  # noqa: E501


        :return: The offeror of this HazmatDetails.  # noqa: E501
        :rtype: str
        """
        return self._offeror

    @offeror.setter
    def offeror(self, offeror):
        """Sets the offeror of this HazmatDetails.


        :param offeror: The offeror of this HazmatDetails.  # noqa: E501
        :type: str
        """

        self._offeror = offeror

    @property
    def packaging_option(self):
        """Gets the packaging_option of this HazmatDetails.  # noqa: E501


        :return: The packaging_option of this HazmatDetails.  # noqa: E501
        :rtype: str
        """
        return self._packaging_option

    @packaging_option.setter
    def packaging_option(self, packaging_option):
        """Sets the packaging_option of this HazmatDetails.


        :param packaging_option: The packaging_option of this HazmatDetails.  # noqa: E501
        :type: str
        """

        self._packaging_option = packaging_option

    @property
    def signatory(self):
        """Gets the signatory of this HazmatDetails.  # noqa: E501


        :return: The signatory of this HazmatDetails.  # noqa: E501
        :rtype: Signatory
        """
        return self._signatory

    @signatory.setter
    def signatory(self, signatory):
        """Sets the signatory of this HazmatDetails.


        :param signatory: The signatory of this HazmatDetails.  # noqa: E501
        :type: Signatory
        """

        self._signatory = signatory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HazmatDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HazmatDetails):
            return True

        return self.to_dict() != other.to_dict()
