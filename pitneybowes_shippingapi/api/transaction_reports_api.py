# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pitneybowes_shippingapi.api_client import ApiClient
from pitneybowes_shippingapi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class TransactionReportsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_transaction_report(self, developer_id, **kwargs):  # noqa: E501
        """This operation retrieves all transactions for a specified period of time.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transaction_report(developer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str developer_id: developerId (required)
        :param bool x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :param datetime from_date: fromDate
        :param int ship_details:
        :param int page:
        :param int size:
        :param str print_status: printStatus
        :param datetime to_date: toDate
        :param str transaction_type: transactionType
        :param str merchant_id: The value of the postalReportingNumber element in the [merchant object](https://shipping.pitneybowes.com/reference/resource-objects.html). This value is also the merchant's Shipper ID.
        :param str sort: Defines a property to sort on and the sort order. Sort order can be ascending (asc) or descending (desc). Use the following form-  * **sort=<property_name>,<sort_direction>** For example- **sort=transactionId,desc** 
        :param str parcel_tracking_number: Parcel tracking number of the shipment.
        :param str transaction_id: The unique string that identifies all the transactions associated with a given shipment. The string comprises the developer ID and the shipment's X-PB-TransactionId, separated by an underscore (_). For example-  * **transactionId=44397664_ad5aa07-ad7414-a78a-c22b3**
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PageRealTransactionDetailReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_transaction_report_with_http_info(developer_id, **kwargs)  # noqa: E501

    def get_transaction_report_with_http_info(self, developer_id, **kwargs):  # noqa: E501
        """This operation retrieves all transactions for a specified period of time.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transaction_report_with_http_info(developer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str developer_id: developerId (required)
        :param bool x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :param datetime from_date: fromDate
        :param int ship_details:
        :param int page:
        :param int size:
        :param str print_status: printStatus
        :param datetime to_date: toDate
        :param str transaction_type: transactionType
        :param str merchant_id: The value of the postalReportingNumber element in the [merchant object](https://shipping.pitneybowes.com/reference/resource-objects.html). This value is also the merchant's Shipper ID.
        :param str sort: Defines a property to sort on and the sort order. Sort order can be ascending (asc) or descending (desc). Use the following form-  * **sort=<property_name>,<sort_direction>** For example- **sort=transactionId,desc** 
        :param str parcel_tracking_number: Parcel tracking number of the shipment.
        :param str transaction_id: The unique string that identifies all the transactions associated with a given shipment. The string comprises the developer ID and the shipment's X-PB-TransactionId, separated by an underscore (_). For example-  * **transactionId=44397664_ad5aa07-ad7414-a78a-c22b3**
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PageRealTransactionDetailReport, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'developer_id',
            'x_pb_unified_error_structure',
            'from_date',
            'ship_details',
            'page',
            'size',
            'print_status',
            'to_date',
            'transaction_type',
            'merchant_id',
            'sort',
            'parcel_tracking_number',
            'transaction_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transaction_report" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'developer_id' is set
        if self.api_client.client_side_validation and ('developer_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['developer_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `developer_id` when calling `get_transaction_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'developer_id' in local_var_params:
            path_params['developerId'] = local_var_params['developer_id']  # noqa: E501

        query_params = []
        if 'from_date' in local_var_params and local_var_params['from_date'] is not None:  # noqa: E501
            query_params.append(('fromDate', local_var_params['from_date']))  # noqa: E501
        if 'ship_details' in local_var_params and local_var_params['ship_details'] is not None:  # noqa: E501
            query_params.append(('shipDetails', local_var_params['ship_details']))  # noqa: E501
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'size' in local_var_params and local_var_params['size'] is not None:  # noqa: E501
            query_params.append(('size', local_var_params['size']))  # noqa: E501
        if 'print_status' in local_var_params and local_var_params['print_status'] is not None:  # noqa: E501
            query_params.append(('printStatus', local_var_params['print_status']))  # noqa: E501
        if 'to_date' in local_var_params and local_var_params['to_date'] is not None:  # noqa: E501
            query_params.append(('toDate', local_var_params['to_date']))  # noqa: E501
        if 'transaction_type' in local_var_params and local_var_params['transaction_type'] is not None:  # noqa: E501
            query_params.append(('transactionType', local_var_params['transaction_type']))  # noqa: E501
        if 'merchant_id' in local_var_params and local_var_params['merchant_id'] is not None:  # noqa: E501
            query_params.append(('merchantId', local_var_params['merchant_id']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'parcel_tracking_number' in local_var_params and local_var_params['parcel_tracking_number'] is not None:  # noqa: E501
            query_params.append(('parcelTrackingNumber', local_var_params['parcel_tracking_number']))  # noqa: E501

        header_params = {}
        if 'x_pb_unified_error_structure' in local_var_params:
            header_params['X-PB-UnifiedErrorStructure'] = local_var_params['x_pb_unified_error_structure']  # noqa: E501
        if 'transaction_id' in local_var_params:
            header_params['transactionId'] = local_var_params['transaction_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        return self.api_client.call_api(
            '/v4/ledger/developers/{developerId}/transactions/reports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageRealTransactionDetailReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
