# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pitneybowes_shippingapi.api_client import ApiClient
from pitneybowes_shippingapi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class TrackingApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_tracking_events(self, add_tracking_events, **kwargs):  # noqa: E501
        """getTrackingDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_tracking_events(add_tracking_events, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param AddTrackingEvents add_tracking_events: add track event (required)
        :param bool x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.add_tracking_events_with_http_info(add_tracking_events, **kwargs)  # noqa: E501

    def add_tracking_events_with_http_info(self, add_tracking_events, **kwargs):  # noqa: E501
        """getTrackingDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_tracking_events_with_http_info(add_tracking_events, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param AddTrackingEvents add_tracking_events: add track event (required)
        :param bool x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse2002, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'add_tracking_events',
            'x_pb_unified_error_structure'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_tracking_events" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'add_tracking_events' is set
        if self.api_client.client_side_validation and ('add_tracking_events' not in local_var_params or  # noqa: E501
                                                        local_var_params['add_tracking_events'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `add_tracking_events` when calling `add_tracking_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_pb_unified_error_structure' in local_var_params:
            header_params['X-PB-UnifiedErrorStructure'] = local_var_params['x_pb_unified_error_structure']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'add_tracking_events' in local_var_params:
            body_params = local_var_params['add_tracking_events']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        return self.api_client.call_api(
            '/v2/track/events', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tracking_details(self, tracking_number, package_identifier_type, carrier, **kwargs):  # noqa: E501
        """getTrackingDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracking_details(tracking_number, package_identifier_type, carrier, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str tracking_number: The tracking number for the shipment. (required)
        :param str package_identifier_type: packageIdentifierType (required)
        :param str carrier: carrier (required)
        :param bool x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TrackingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_tracking_details_with_http_info(tracking_number, package_identifier_type, carrier, **kwargs)  # noqa: E501

    def get_tracking_details_with_http_info(self, tracking_number, package_identifier_type, carrier, **kwargs):  # noqa: E501
        """getTrackingDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracking_details_with_http_info(tracking_number, package_identifier_type, carrier, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str tracking_number: The tracking number for the shipment. (required)
        :param str package_identifier_type: packageIdentifierType (required)
        :param str carrier: carrier (required)
        :param bool x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TrackingResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'tracking_number',
            'package_identifier_type',
            'carrier',
            'x_pb_unified_error_structure'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tracking_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'tracking_number' is set
        if self.api_client.client_side_validation and ('tracking_number' not in local_var_params or  # noqa: E501
                                                        local_var_params['tracking_number'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `tracking_number` when calling `get_tracking_details`")  # noqa: E501
        # verify the required parameter 'package_identifier_type' is set
        if self.api_client.client_side_validation and ('package_identifier_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['package_identifier_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `package_identifier_type` when calling `get_tracking_details`")  # noqa: E501
        # verify the required parameter 'carrier' is set
        if self.api_client.client_side_validation and ('carrier' not in local_var_params or  # noqa: E501
                                                        local_var_params['carrier'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `carrier` when calling `get_tracking_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracking_number' in local_var_params:
            path_params['trackingNumber'] = local_var_params['tracking_number']  # noqa: E501

        query_params = []
        if 'package_identifier_type' in local_var_params and local_var_params['package_identifier_type'] is not None:  # noqa: E501
            query_params.append(('packageIdentifierType', local_var_params['package_identifier_type']))  # noqa: E501
        if 'carrier' in local_var_params and local_var_params['carrier'] is not None:  # noqa: E501
            query_params.append(('carrier', local_var_params['carrier']))  # noqa: E501

        header_params = {}
        if 'x_pb_unified_error_structure' in local_var_params:
            header_params['X-PB-UnifiedErrorStructure'] = local_var_params['x_pb_unified_error_structure']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        return self.api_client.call_api(
            '/v1/tracking/{trackingNumber}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
