# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pbshipping.configuration import Configuration


class CrossBorderQuotesRequestBasketItems(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'item_id': 'str',
        'categories': 'list[CrossBorderQuotesRequestCategories]',
        'description': 'str',
        'long_description': 'str',
        'unit_weight': 'CrossBorderQuotesRequestUnitWeight',
        'item_dimension': 'CrossBorderQuotesRequestItemDimension',
        'url': 'str',
        'quantity': 'int',
        'unit_price': 'float',
        'origin_country_code': 'str',
        'parent_identifier': 'str',
        'child_identifier': 'str',
        'kit': 'str',
        'kit_identifier': 'str',
        'kit_quantity': 'str',
        'manufacturer': 'str',
        'brand': 'str',
        'eccn': 'str',
        'enabled': 'bool',
        'pricing': 'CrossBorderQuotesRequestPricing',
        'h_s_tariff_code': 'str',
        'h_s_tariff_code_country': 'str',
        'identifiers': 'list[CrossBorderQuotesRequestIdentifiers]',
        'image_urls': 'list[str]',
        'ships_alone': 'bool',
        'attributes': 'list[CrossBorderQuotesRequestAttributes]',
        'hazmats': 'list[str]'
    }

    attribute_map = {
        'item_id': 'itemId',
        'categories': 'categories',
        'description': 'description',
        'long_description': 'longDescription',
        'unit_weight': 'unitWeight',
        'item_dimension': 'itemDimension',
        'url': 'url',
        'quantity': 'quantity',
        'unit_price': 'unitPrice',
        'origin_country_code': 'originCountryCode',
        'parent_identifier': 'parentIdentifier',
        'child_identifier': 'childIdentifier',
        'kit': 'kit',
        'kit_identifier': 'kitIdentifier',
        'kit_quantity': 'kitQuantity',
        'manufacturer': 'manufacturer',
        'brand': 'brand',
        'eccn': 'eccn',
        'enabled': 'enabled',
        'pricing': 'pricing',
        'h_s_tariff_code': 'hSTariffCode',
        'h_s_tariff_code_country': 'hSTariffCodeCountry',
        'identifiers': 'identifiers',
        'image_urls': 'imageUrls',
        'ships_alone': 'shipsAlone',
        'attributes': 'attributes',
        'hazmats': 'hazmats'
    }

    def __init__(self, item_id=None, categories=None, description=None, long_description=None, unit_weight=None, item_dimension=None, url=None, quantity=None, unit_price=None, origin_country_code=None, parent_identifier=None, child_identifier=None, kit=None, kit_identifier=None, kit_quantity=None, manufacturer=None, brand=None, eccn=None, enabled=None, pricing=None, h_s_tariff_code=None, h_s_tariff_code_country=None, identifiers=None, image_urls=None, ships_alone=None, attributes=None, hazmats=None, local_vars_configuration=None):  # noqa: E501
        """CrossBorderQuotesRequestBasketItems - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._item_id = None
        self._categories = None
        self._description = None
        self._long_description = None
        self._unit_weight = None
        self._item_dimension = None
        self._url = None
        self._quantity = None
        self._unit_price = None
        self._origin_country_code = None
        self._parent_identifier = None
        self._child_identifier = None
        self._kit = None
        self._kit_identifier = None
        self._kit_quantity = None
        self._manufacturer = None
        self._brand = None
        self._eccn = None
        self._enabled = None
        self._pricing = None
        self._h_s_tariff_code = None
        self._h_s_tariff_code_country = None
        self._identifiers = None
        self._image_urls = None
        self._ships_alone = None
        self._attributes = None
        self._hazmats = None
        self.discriminator = None

        if item_id is not None:
            self.item_id = item_id
        if categories is not None:
            self.categories = categories
        if description is not None:
            self.description = description
        if long_description is not None:
            self.long_description = long_description
        if unit_weight is not None:
            self.unit_weight = unit_weight
        if item_dimension is not None:
            self.item_dimension = item_dimension
        if url is not None:
            self.url = url
        if quantity is not None:
            self.quantity = quantity
        if unit_price is not None:
            self.unit_price = unit_price
        if origin_country_code is not None:
            self.origin_country_code = origin_country_code
        if parent_identifier is not None:
            self.parent_identifier = parent_identifier
        if child_identifier is not None:
            self.child_identifier = child_identifier
        if kit is not None:
            self.kit = kit
        if kit_identifier is not None:
            self.kit_identifier = kit_identifier
        if kit_quantity is not None:
            self.kit_quantity = kit_quantity
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if brand is not None:
            self.brand = brand
        if eccn is not None:
            self.eccn = eccn
        if enabled is not None:
            self.enabled = enabled
        if pricing is not None:
            self.pricing = pricing
        if h_s_tariff_code is not None:
            self.h_s_tariff_code = h_s_tariff_code
        if h_s_tariff_code_country is not None:
            self.h_s_tariff_code_country = h_s_tariff_code_country
        if identifiers is not None:
            self.identifiers = identifiers
        if image_urls is not None:
            self.image_urls = image_urls
        if ships_alone is not None:
            self.ships_alone = ships_alone
        if attributes is not None:
            self.attributes = attributes
        if hazmats is not None:
            self.hazmats = hazmats

    @property
    def item_id(self):
        """Gets the item_id of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The item_id of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this CrossBorderQuotesRequestBasketItems.


        :param item_id: The item_id of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def categories(self):
        """Gets the categories of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The categories of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: list[CrossBorderQuotesRequestCategories]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this CrossBorderQuotesRequestBasketItems.


        :param categories: The categories of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: list[CrossBorderQuotesRequestCategories]
        """

        self._categories = categories

    @property
    def description(self):
        """Gets the description of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The description of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CrossBorderQuotesRequestBasketItems.


        :param description: The description of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def long_description(self):
        """Gets the long_description of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The long_description of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this CrossBorderQuotesRequestBasketItems.


        :param long_description: The long_description of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: str
        """

        self._long_description = long_description

    @property
    def unit_weight(self):
        """Gets the unit_weight of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The unit_weight of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: CrossBorderQuotesRequestUnitWeight
        """
        return self._unit_weight

    @unit_weight.setter
    def unit_weight(self, unit_weight):
        """Sets the unit_weight of this CrossBorderQuotesRequestBasketItems.


        :param unit_weight: The unit_weight of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: CrossBorderQuotesRequestUnitWeight
        """

        self._unit_weight = unit_weight

    @property
    def item_dimension(self):
        """Gets the item_dimension of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The item_dimension of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: CrossBorderQuotesRequestItemDimension
        """
        return self._item_dimension

    @item_dimension.setter
    def item_dimension(self, item_dimension):
        """Sets the item_dimension of this CrossBorderQuotesRequestBasketItems.


        :param item_dimension: The item_dimension of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: CrossBorderQuotesRequestItemDimension
        """

        self._item_dimension = item_dimension

    @property
    def url(self):
        """Gets the url of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The url of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CrossBorderQuotesRequestBasketItems.


        :param url: The url of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def quantity(self):
        """Gets the quantity of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The quantity of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this CrossBorderQuotesRequestBasketItems.


        :param quantity: The quantity of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def unit_price(self):
        """Gets the unit_price of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The unit_price of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this CrossBorderQuotesRequestBasketItems.


        :param unit_price: The unit_price of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: float
        """

        self._unit_price = unit_price

    @property
    def origin_country_code(self):
        """Gets the origin_country_code of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The origin_country_code of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: str
        """
        return self._origin_country_code

    @origin_country_code.setter
    def origin_country_code(self, origin_country_code):
        """Sets the origin_country_code of this CrossBorderQuotesRequestBasketItems.


        :param origin_country_code: The origin_country_code of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: str
        """

        self._origin_country_code = origin_country_code

    @property
    def parent_identifier(self):
        """Gets the parent_identifier of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The parent_identifier of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: str
        """
        return self._parent_identifier

    @parent_identifier.setter
    def parent_identifier(self, parent_identifier):
        """Sets the parent_identifier of this CrossBorderQuotesRequestBasketItems.


        :param parent_identifier: The parent_identifier of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: str
        """

        self._parent_identifier = parent_identifier

    @property
    def child_identifier(self):
        """Gets the child_identifier of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The child_identifier of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: str
        """
        return self._child_identifier

    @child_identifier.setter
    def child_identifier(self, child_identifier):
        """Sets the child_identifier of this CrossBorderQuotesRequestBasketItems.


        :param child_identifier: The child_identifier of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: str
        """

        self._child_identifier = child_identifier

    @property
    def kit(self):
        """Gets the kit of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The kit of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: str
        """
        return self._kit

    @kit.setter
    def kit(self, kit):
        """Sets the kit of this CrossBorderQuotesRequestBasketItems.


        :param kit: The kit of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: str
        """

        self._kit = kit

    @property
    def kit_identifier(self):
        """Gets the kit_identifier of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The kit_identifier of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: str
        """
        return self._kit_identifier

    @kit_identifier.setter
    def kit_identifier(self, kit_identifier):
        """Sets the kit_identifier of this CrossBorderQuotesRequestBasketItems.


        :param kit_identifier: The kit_identifier of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: str
        """

        self._kit_identifier = kit_identifier

    @property
    def kit_quantity(self):
        """Gets the kit_quantity of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The kit_quantity of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: str
        """
        return self._kit_quantity

    @kit_quantity.setter
    def kit_quantity(self, kit_quantity):
        """Sets the kit_quantity of this CrossBorderQuotesRequestBasketItems.


        :param kit_quantity: The kit_quantity of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: str
        """

        self._kit_quantity = kit_quantity

    @property
    def manufacturer(self):
        """Gets the manufacturer of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The manufacturer of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this CrossBorderQuotesRequestBasketItems.


        :param manufacturer: The manufacturer of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def brand(self):
        """Gets the brand of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The brand of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this CrossBorderQuotesRequestBasketItems.


        :param brand: The brand of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def eccn(self):
        """Gets the eccn of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The eccn of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: str
        """
        return self._eccn

    @eccn.setter
    def eccn(self, eccn):
        """Sets the eccn of this CrossBorderQuotesRequestBasketItems.


        :param eccn: The eccn of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: str
        """

        self._eccn = eccn

    @property
    def enabled(self):
        """Gets the enabled of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The enabled of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CrossBorderQuotesRequestBasketItems.


        :param enabled: The enabled of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def pricing(self):
        """Gets the pricing of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The pricing of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: CrossBorderQuotesRequestPricing
        """
        return self._pricing

    @pricing.setter
    def pricing(self, pricing):
        """Sets the pricing of this CrossBorderQuotesRequestBasketItems.


        :param pricing: The pricing of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: CrossBorderQuotesRequestPricing
        """

        self._pricing = pricing

    @property
    def h_s_tariff_code(self):
        """Gets the h_s_tariff_code of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The h_s_tariff_code of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: str
        """
        return self._h_s_tariff_code

    @h_s_tariff_code.setter
    def h_s_tariff_code(self, h_s_tariff_code):
        """Sets the h_s_tariff_code of this CrossBorderQuotesRequestBasketItems.


        :param h_s_tariff_code: The h_s_tariff_code of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: str
        """

        self._h_s_tariff_code = h_s_tariff_code

    @property
    def h_s_tariff_code_country(self):
        """Gets the h_s_tariff_code_country of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The h_s_tariff_code_country of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: str
        """
        return self._h_s_tariff_code_country

    @h_s_tariff_code_country.setter
    def h_s_tariff_code_country(self, h_s_tariff_code_country):
        """Sets the h_s_tariff_code_country of this CrossBorderQuotesRequestBasketItems.


        :param h_s_tariff_code_country: The h_s_tariff_code_country of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: str
        """

        self._h_s_tariff_code_country = h_s_tariff_code_country

    @property
    def identifiers(self):
        """Gets the identifiers of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The identifiers of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: list[CrossBorderQuotesRequestIdentifiers]
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this CrossBorderQuotesRequestBasketItems.


        :param identifiers: The identifiers of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: list[CrossBorderQuotesRequestIdentifiers]
        """

        self._identifiers = identifiers

    @property
    def image_urls(self):
        """Gets the image_urls of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The image_urls of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: list[str]
        """
        return self._image_urls

    @image_urls.setter
    def image_urls(self, image_urls):
        """Sets the image_urls of this CrossBorderQuotesRequestBasketItems.


        :param image_urls: The image_urls of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: list[str]
        """

        self._image_urls = image_urls

    @property
    def ships_alone(self):
        """Gets the ships_alone of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The ships_alone of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: bool
        """
        return self._ships_alone

    @ships_alone.setter
    def ships_alone(self, ships_alone):
        """Sets the ships_alone of this CrossBorderQuotesRequestBasketItems.


        :param ships_alone: The ships_alone of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: bool
        """

        self._ships_alone = ships_alone

    @property
    def attributes(self):
        """Gets the attributes of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The attributes of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: list[CrossBorderQuotesRequestAttributes]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this CrossBorderQuotesRequestBasketItems.


        :param attributes: The attributes of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: list[CrossBorderQuotesRequestAttributes]
        """

        self._attributes = attributes

    @property
    def hazmats(self):
        """Gets the hazmats of this CrossBorderQuotesRequestBasketItems.  # noqa: E501


        :return: The hazmats of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :rtype: list[str]
        """
        return self._hazmats

    @hazmats.setter
    def hazmats(self, hazmats):
        """Sets the hazmats of this CrossBorderQuotesRequestBasketItems.


        :param hazmats: The hazmats of this CrossBorderQuotesRequestBasketItems.  # noqa: E501
        :type: list[str]
        """

        self._hazmats = hazmats

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrossBorderQuotesRequestBasketItems):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CrossBorderQuotesRequestBasketItems):
            return True

        return self.to_dict() != other.to_dict()
