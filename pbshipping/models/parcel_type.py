# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pbshipping.configuration import Configuration


class ParcelType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    FLAT = "FLAT"
    LETTER = "LETTER"
    FRE = "FRE"
    LGENV = "LGENV"
    LGLFRENV = "LGLFRENV"
    PFRENV = "PFRENV"
    FRB = "FRB"
    LFRB = "LFRB"
    DVDBOX = "DVDBOX"
    VIDEOBOX = "VIDEOBOX"
    MLFRB = "MLFRB"
    RBA = "RBA"
    RBB = "RBB"
    LP = "LP"
    SACK = "SACK"
    SOFTPACK = "SOFTPACK"
    MIX = "MIX"
    LTR = "LTR"
    NMLETTER = "NMLETTER"
    NMLTR = "NMLTR"
    IRRPKG = "IRRPKG"
    SFRB = "SFRB"
    EMMTB = "EMMTB"
    FTB = "FTB"
    FTTB = "FTTB"
    HTB = "HTB"
    PACK = "PACK"
    BOX = "BOX"
    SMALL_EXP_BOX = "SMALL_EXP_BOX"
    MED_EXP_BOX = "MED_EXP_BOX"
    LG_EXP_BOX = "LG_EXP_BOX"
    EXTRA_LG_EXP_BOX = "EXTRA_LG_EXP_BOX"
    TUBE = "TUBE"
    _25KG = "25KG"
    _10KG = "10KG"
    PKG = "PKG"

    allowable_values = [FLAT, LETTER, FRE, LGENV, LGLFRENV, PFRENV, FRB, LFRB, DVDBOX, VIDEOBOX, MLFRB, RBA, RBB, LP, SACK, SOFTPACK, MIX, LTR, NMLETTER, NMLTR, IRRPKG, SFRB, EMMTB, FTB, FTTB, HTB, PACK, BOX, SMALL_EXP_BOX, MED_EXP_BOX, LG_EXP_BOX, EXTRA_LG_EXP_BOX, TUBE, _25KG, _10KG, PKG]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """ParcelType - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParcelType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ParcelType):
            return True

        return self.to_dict() != other.to_dict()
