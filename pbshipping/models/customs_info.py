# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pbshipping.configuration import Configuration


class CustomsInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'eelpfc': 'str',
        'blanket_end_date': 'str',
        'blanket_start_date': 'str',
        'certificate_number': 'str',
        'comments': 'str',
        'currency_code': 'str',
        'customs_declared_value': 'float',
        'declaration_statement': 'str',
        'freight_charge': 'float',
        'from_customs_reference': 'str',
        'handling_costs': 'float',
        'importer_customs_reference': 'str',
        'insured_amount': 'float',
        'insured_number': 'str',
        'invoice_number': 'str',
        'license_number': 'str',
        'other_charge': 'float',
        'other_description': 'str',
        'other_type': 'str',
        'packing_costs': 'float',
        'producer_specification': 'str',
        'reason_for_export': 'str',
        'reason_for_export_explanation': 'str',
        'sdr_value': 'float',
        'shipping_document_type': 'str',
        'signature_contact': 'Address',
        'terms_of_sale': 'str'
    }

    attribute_map = {
        'eelpfc': 'EELPFC',
        'blanket_end_date': 'blanketEndDate',
        'blanket_start_date': 'blanketStartDate',
        'certificate_number': 'certificateNumber',
        'comments': 'comments',
        'currency_code': 'currencyCode',
        'customs_declared_value': 'customsDeclaredValue',
        'declaration_statement': 'declarationStatement',
        'freight_charge': 'freightCharge',
        'from_customs_reference': 'fromCustomsReference',
        'handling_costs': 'handlingCosts',
        'importer_customs_reference': 'importerCustomsReference',
        'insured_amount': 'insuredAmount',
        'insured_number': 'insuredNumber',
        'invoice_number': 'invoiceNumber',
        'license_number': 'licenseNumber',
        'other_charge': 'otherCharge',
        'other_description': 'otherDescription',
        'other_type': 'otherType',
        'packing_costs': 'packingCosts',
        'producer_specification': 'producerSpecification',
        'reason_for_export': 'reasonForExport',
        'reason_for_export_explanation': 'reasonForExportExplanation',
        'sdr_value': 'sdrValue',
        'shipping_document_type': 'shippingDocumentType',
        'signature_contact': 'signatureContact',
        'terms_of_sale': 'termsOfSale'
    }

    def __init__(self, eelpfc=None, blanket_end_date=None, blanket_start_date=None, certificate_number=None, comments=None, currency_code=None, customs_declared_value=None, declaration_statement=None, freight_charge=None, from_customs_reference=None, handling_costs=None, importer_customs_reference=None, insured_amount=None, insured_number=None, invoice_number=None, license_number=None, other_charge=None, other_description=None, other_type=None, packing_costs=None, producer_specification=None, reason_for_export=None, reason_for_export_explanation=None, sdr_value=None, shipping_document_type=None, signature_contact=None, terms_of_sale=None, local_vars_configuration=None):  # noqa: E501
        """CustomsInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._eelpfc = None
        self._blanket_end_date = None
        self._blanket_start_date = None
        self._certificate_number = None
        self._comments = None
        self._currency_code = None
        self._customs_declared_value = None
        self._declaration_statement = None
        self._freight_charge = None
        self._from_customs_reference = None
        self._handling_costs = None
        self._importer_customs_reference = None
        self._insured_amount = None
        self._insured_number = None
        self._invoice_number = None
        self._license_number = None
        self._other_charge = None
        self._other_description = None
        self._other_type = None
        self._packing_costs = None
        self._producer_specification = None
        self._reason_for_export = None
        self._reason_for_export_explanation = None
        self._sdr_value = None
        self._shipping_document_type = None
        self._signature_contact = None
        self._terms_of_sale = None
        self.discriminator = None

        if eelpfc is not None:
            self.eelpfc = eelpfc
        if blanket_end_date is not None:
            self.blanket_end_date = blanket_end_date
        if blanket_start_date is not None:
            self.blanket_start_date = blanket_start_date
        if certificate_number is not None:
            self.certificate_number = certificate_number
        if comments is not None:
            self.comments = comments
        self.currency_code = currency_code
        if customs_declared_value is not None:
            self.customs_declared_value = customs_declared_value
        if declaration_statement is not None:
            self.declaration_statement = declaration_statement
        if freight_charge is not None:
            self.freight_charge = freight_charge
        if from_customs_reference is not None:
            self.from_customs_reference = from_customs_reference
        if handling_costs is not None:
            self.handling_costs = handling_costs
        if importer_customs_reference is not None:
            self.importer_customs_reference = importer_customs_reference
        if insured_amount is not None:
            self.insured_amount = insured_amount
        if insured_number is not None:
            self.insured_number = insured_number
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if license_number is not None:
            self.license_number = license_number
        if other_charge is not None:
            self.other_charge = other_charge
        if other_description is not None:
            self.other_description = other_description
        if other_type is not None:
            self.other_type = other_type
        if packing_costs is not None:
            self.packing_costs = packing_costs
        if producer_specification is not None:
            self.producer_specification = producer_specification
        if reason_for_export is not None:
            self.reason_for_export = reason_for_export
        if reason_for_export_explanation is not None:
            self.reason_for_export_explanation = reason_for_export_explanation
        if sdr_value is not None:
            self.sdr_value = sdr_value
        if shipping_document_type is not None:
            self.shipping_document_type = shipping_document_type
        if signature_contact is not None:
            self.signature_contact = signature_contact
        if terms_of_sale is not None:
            self.terms_of_sale = terms_of_sale

    @property
    def eelpfc(self):
        """Gets the eelpfc of this CustomsInfo.  # noqa: E501


        :return: The eelpfc of this CustomsInfo.  # noqa: E501
        :rtype: str
        """
        return self._eelpfc

    @eelpfc.setter
    def eelpfc(self, eelpfc):
        """Sets the eelpfc of this CustomsInfo.


        :param eelpfc: The eelpfc of this CustomsInfo.  # noqa: E501
        :type: str
        """

        self._eelpfc = eelpfc

    @property
    def blanket_end_date(self):
        """Gets the blanket_end_date of this CustomsInfo.  # noqa: E501

        format: YYYY-MM-DD  # noqa: E501

        :return: The blanket_end_date of this CustomsInfo.  # noqa: E501
        :rtype: str
        """
        return self._blanket_end_date

    @blanket_end_date.setter
    def blanket_end_date(self, blanket_end_date):
        """Sets the blanket_end_date of this CustomsInfo.

        format: YYYY-MM-DD  # noqa: E501

        :param blanket_end_date: The blanket_end_date of this CustomsInfo.  # noqa: E501
        :type: str
        """

        self._blanket_end_date = blanket_end_date

    @property
    def blanket_start_date(self):
        """Gets the blanket_start_date of this CustomsInfo.  # noqa: E501

        format: YYYY-MM-DD  # noqa: E501

        :return: The blanket_start_date of this CustomsInfo.  # noqa: E501
        :rtype: str
        """
        return self._blanket_start_date

    @blanket_start_date.setter
    def blanket_start_date(self, blanket_start_date):
        """Sets the blanket_start_date of this CustomsInfo.

        format: YYYY-MM-DD  # noqa: E501

        :param blanket_start_date: The blanket_start_date of this CustomsInfo.  # noqa: E501
        :type: str
        """

        self._blanket_start_date = blanket_start_date

    @property
    def certificate_number(self):
        """Gets the certificate_number of this CustomsInfo.  # noqa: E501


        :return: The certificate_number of this CustomsInfo.  # noqa: E501
        :rtype: str
        """
        return self._certificate_number

    @certificate_number.setter
    def certificate_number(self, certificate_number):
        """Sets the certificate_number of this CustomsInfo.


        :param certificate_number: The certificate_number of this CustomsInfo.  # noqa: E501
        :type: str
        """

        self._certificate_number = certificate_number

    @property
    def comments(self):
        """Gets the comments of this CustomsInfo.  # noqa: E501


        :return: The comments of this CustomsInfo.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this CustomsInfo.


        :param comments: The comments of this CustomsInfo.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def currency_code(self):
        """Gets the currency_code of this CustomsInfo.  # noqa: E501

        ISO-4217  # noqa: E501

        :return: The currency_code of this CustomsInfo.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this CustomsInfo.

        ISO-4217  # noqa: E501

        :param currency_code: The currency_code of this CustomsInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and currency_code is None:  # noqa: E501
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def customs_declared_value(self):
        """Gets the customs_declared_value of this CustomsInfo.  # noqa: E501


        :return: The customs_declared_value of this CustomsInfo.  # noqa: E501
        :rtype: float
        """
        return self._customs_declared_value

    @customs_declared_value.setter
    def customs_declared_value(self, customs_declared_value):
        """Sets the customs_declared_value of this CustomsInfo.


        :param customs_declared_value: The customs_declared_value of this CustomsInfo.  # noqa: E501
        :type: float
        """

        self._customs_declared_value = customs_declared_value

    @property
    def declaration_statement(self):
        """Gets the declaration_statement of this CustomsInfo.  # noqa: E501


        :return: The declaration_statement of this CustomsInfo.  # noqa: E501
        :rtype: str
        """
        return self._declaration_statement

    @declaration_statement.setter
    def declaration_statement(self, declaration_statement):
        """Sets the declaration_statement of this CustomsInfo.


        :param declaration_statement: The declaration_statement of this CustomsInfo.  # noqa: E501
        :type: str
        """

        self._declaration_statement = declaration_statement

    @property
    def freight_charge(self):
        """Gets the freight_charge of this CustomsInfo.  # noqa: E501


        :return: The freight_charge of this CustomsInfo.  # noqa: E501
        :rtype: float
        """
        return self._freight_charge

    @freight_charge.setter
    def freight_charge(self, freight_charge):
        """Sets the freight_charge of this CustomsInfo.


        :param freight_charge: The freight_charge of this CustomsInfo.  # noqa: E501
        :type: float
        """

        self._freight_charge = freight_charge

    @property
    def from_customs_reference(self):
        """Gets the from_customs_reference of this CustomsInfo.  # noqa: E501


        :return: The from_customs_reference of this CustomsInfo.  # noqa: E501
        :rtype: str
        """
        return self._from_customs_reference

    @from_customs_reference.setter
    def from_customs_reference(self, from_customs_reference):
        """Sets the from_customs_reference of this CustomsInfo.


        :param from_customs_reference: The from_customs_reference of this CustomsInfo.  # noqa: E501
        :type: str
        """

        self._from_customs_reference = from_customs_reference

    @property
    def handling_costs(self):
        """Gets the handling_costs of this CustomsInfo.  # noqa: E501


        :return: The handling_costs of this CustomsInfo.  # noqa: E501
        :rtype: float
        """
        return self._handling_costs

    @handling_costs.setter
    def handling_costs(self, handling_costs):
        """Sets the handling_costs of this CustomsInfo.


        :param handling_costs: The handling_costs of this CustomsInfo.  # noqa: E501
        :type: float
        """

        self._handling_costs = handling_costs

    @property
    def importer_customs_reference(self):
        """Gets the importer_customs_reference of this CustomsInfo.  # noqa: E501


        :return: The importer_customs_reference of this CustomsInfo.  # noqa: E501
        :rtype: str
        """
        return self._importer_customs_reference

    @importer_customs_reference.setter
    def importer_customs_reference(self, importer_customs_reference):
        """Sets the importer_customs_reference of this CustomsInfo.


        :param importer_customs_reference: The importer_customs_reference of this CustomsInfo.  # noqa: E501
        :type: str
        """

        self._importer_customs_reference = importer_customs_reference

    @property
    def insured_amount(self):
        """Gets the insured_amount of this CustomsInfo.  # noqa: E501


        :return: The insured_amount of this CustomsInfo.  # noqa: E501
        :rtype: float
        """
        return self._insured_amount

    @insured_amount.setter
    def insured_amount(self, insured_amount):
        """Sets the insured_amount of this CustomsInfo.


        :param insured_amount: The insured_amount of this CustomsInfo.  # noqa: E501
        :type: float
        """

        self._insured_amount = insured_amount

    @property
    def insured_number(self):
        """Gets the insured_number of this CustomsInfo.  # noqa: E501


        :return: The insured_number of this CustomsInfo.  # noqa: E501
        :rtype: str
        """
        return self._insured_number

    @insured_number.setter
    def insured_number(self, insured_number):
        """Sets the insured_number of this CustomsInfo.


        :param insured_number: The insured_number of this CustomsInfo.  # noqa: E501
        :type: str
        """

        self._insured_number = insured_number

    @property
    def invoice_number(self):
        """Gets the invoice_number of this CustomsInfo.  # noqa: E501


        :return: The invoice_number of this CustomsInfo.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this CustomsInfo.


        :param invoice_number: The invoice_number of this CustomsInfo.  # noqa: E501
        :type: str
        """

        self._invoice_number = invoice_number

    @property
    def license_number(self):
        """Gets the license_number of this CustomsInfo.  # noqa: E501


        :return: The license_number of this CustomsInfo.  # noqa: E501
        :rtype: str
        """
        return self._license_number

    @license_number.setter
    def license_number(self, license_number):
        """Sets the license_number of this CustomsInfo.


        :param license_number: The license_number of this CustomsInfo.  # noqa: E501
        :type: str
        """

        self._license_number = license_number

    @property
    def other_charge(self):
        """Gets the other_charge of this CustomsInfo.  # noqa: E501


        :return: The other_charge of this CustomsInfo.  # noqa: E501
        :rtype: float
        """
        return self._other_charge

    @other_charge.setter
    def other_charge(self, other_charge):
        """Sets the other_charge of this CustomsInfo.


        :param other_charge: The other_charge of this CustomsInfo.  # noqa: E501
        :type: float
        """

        self._other_charge = other_charge

    @property
    def other_description(self):
        """Gets the other_description of this CustomsInfo.  # noqa: E501


        :return: The other_description of this CustomsInfo.  # noqa: E501
        :rtype: str
        """
        return self._other_description

    @other_description.setter
    def other_description(self, other_description):
        """Sets the other_description of this CustomsInfo.


        :param other_description: The other_description of this CustomsInfo.  # noqa: E501
        :type: str
        """

        self._other_description = other_description

    @property
    def other_type(self):
        """Gets the other_type of this CustomsInfo.  # noqa: E501


        :return: The other_type of this CustomsInfo.  # noqa: E501
        :rtype: str
        """
        return self._other_type

    @other_type.setter
    def other_type(self, other_type):
        """Sets the other_type of this CustomsInfo.


        :param other_type: The other_type of this CustomsInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["COMMISSIONS", "DISCOUNTS", "HANDLING_FEES", "OTHER", "ROYALTIES_AND_LICENSE_FEES", "TAXES"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and other_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `other_type` ({0}), must be one of {1}"  # noqa: E501
                .format(other_type, allowed_values)
            )

        self._other_type = other_type

    @property
    def packing_costs(self):
        """Gets the packing_costs of this CustomsInfo.  # noqa: E501


        :return: The packing_costs of this CustomsInfo.  # noqa: E501
        :rtype: float
        """
        return self._packing_costs

    @packing_costs.setter
    def packing_costs(self, packing_costs):
        """Sets the packing_costs of this CustomsInfo.


        :param packing_costs: The packing_costs of this CustomsInfo.  # noqa: E501
        :type: float
        """

        self._packing_costs = packing_costs

    @property
    def producer_specification(self):
        """Gets the producer_specification of this CustomsInfo.  # noqa: E501


        :return: The producer_specification of this CustomsInfo.  # noqa: E501
        :rtype: str
        """
        return self._producer_specification

    @producer_specification.setter
    def producer_specification(self, producer_specification):
        """Sets the producer_specification of this CustomsInfo.


        :param producer_specification: The producer_specification of this CustomsInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["MULTIPLE_SPECIFIED", "SAME", "SINGLE_SPECIFIED", "UNKNOWN", "AVAILABLE_UPON_REQUEST"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and producer_specification not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `producer_specification` ({0}), must be one of {1}"  # noqa: E501
                .format(producer_specification, allowed_values)
            )

        self._producer_specification = producer_specification

    @property
    def reason_for_export(self):
        """Gets the reason_for_export of this CustomsInfo.  # noqa: E501


        :return: The reason_for_export of this CustomsInfo.  # noqa: E501
        :rtype: str
        """
        return self._reason_for_export

    @reason_for_export.setter
    def reason_for_export(self, reason_for_export):
        """Sets the reason_for_export of this CustomsInfo.


        :param reason_for_export: The reason_for_export of this CustomsInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["GIFT", "COMMERCIAL_SAMPLE", "MERCHANDISE", "DOCUMENTS", "RETURNED_GOODS", "SOLD", "NOT_SOLD", "OTHER", "DANGEROUS_GOOD", "HUMANITARIAN_GOODS"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and reason_for_export not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `reason_for_export` ({0}), must be one of {1}"  # noqa: E501
                .format(reason_for_export, allowed_values)
            )

        self._reason_for_export = reason_for_export

    @property
    def reason_for_export_explanation(self):
        """Gets the reason_for_export_explanation of this CustomsInfo.  # noqa: E501


        :return: The reason_for_export_explanation of this CustomsInfo.  # noqa: E501
        :rtype: str
        """
        return self._reason_for_export_explanation

    @reason_for_export_explanation.setter
    def reason_for_export_explanation(self, reason_for_export_explanation):
        """Sets the reason_for_export_explanation of this CustomsInfo.


        :param reason_for_export_explanation: The reason_for_export_explanation of this CustomsInfo.  # noqa: E501
        :type: str
        """

        self._reason_for_export_explanation = reason_for_export_explanation

    @property
    def sdr_value(self):
        """Gets the sdr_value of this CustomsInfo.  # noqa: E501


        :return: The sdr_value of this CustomsInfo.  # noqa: E501
        :rtype: float
        """
        return self._sdr_value

    @sdr_value.setter
    def sdr_value(self, sdr_value):
        """Sets the sdr_value of this CustomsInfo.


        :param sdr_value: The sdr_value of this CustomsInfo.  # noqa: E501
        :type: float
        """

        self._sdr_value = sdr_value

    @property
    def shipping_document_type(self):
        """Gets the shipping_document_type of this CustomsInfo.  # noqa: E501


        :return: The shipping_document_type of this CustomsInfo.  # noqa: E501
        :rtype: str
        """
        return self._shipping_document_type

    @shipping_document_type.setter
    def shipping_document_type(self, shipping_document_type):
        """Sets the shipping_document_type of this CustomsInfo.


        :param shipping_document_type: The shipping_document_type of this CustomsInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["NAFTA", "COO"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and shipping_document_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `shipping_document_type` ({0}), must be one of {1}"  # noqa: E501
                .format(shipping_document_type, allowed_values)
            )

        self._shipping_document_type = shipping_document_type

    @property
    def signature_contact(self):
        """Gets the signature_contact of this CustomsInfo.  # noqa: E501


        :return: The signature_contact of this CustomsInfo.  # noqa: E501
        :rtype: Address
        """
        return self._signature_contact

    @signature_contact.setter
    def signature_contact(self, signature_contact):
        """Sets the signature_contact of this CustomsInfo.


        :param signature_contact: The signature_contact of this CustomsInfo.  # noqa: E501
        :type: Address
        """

        self._signature_contact = signature_contact

    @property
    def terms_of_sale(self):
        """Gets the terms_of_sale of this CustomsInfo.  # noqa: E501


        :return: The terms_of_sale of this CustomsInfo.  # noqa: E501
        :rtype: str
        """
        return self._terms_of_sale

    @terms_of_sale.setter
    def terms_of_sale(self, terms_of_sale):
        """Sets the terms_of_sale of this CustomsInfo.


        :param terms_of_sale: The terms_of_sale of this CustomsInfo.  # noqa: E501
        :type: str
        """

        self._terms_of_sale = terms_of_sale

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomsInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomsInfo):
            return True

        return self.to_dict() != other.to_dict()
