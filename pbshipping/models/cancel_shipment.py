# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pbshipping.configuration import Configuration


class CancelShipment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cancel_initiator': 'str',
        'carrier': 'str',
        'error_messages': 'list[Errors]',
        'parcel_tracking_number': 'str',
        'status': 'str',
        'total_carrier_charge': 'float'
    }

    attribute_map = {
        'cancel_initiator': 'cancelInitiator',
        'carrier': 'carrier',
        'error_messages': 'errorMessages',
        'parcel_tracking_number': 'parcelTrackingNumber',
        'status': 'status',
        'total_carrier_charge': 'totalCarrierCharge'
    }

    def __init__(self, cancel_initiator=None, carrier=None, error_messages=None, parcel_tracking_number=None, status=None, total_carrier_charge=None, local_vars_configuration=None):  # noqa: E501
        """CancelShipment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cancel_initiator = None
        self._carrier = None
        self._error_messages = None
        self._parcel_tracking_number = None
        self._status = None
        self._total_carrier_charge = None
        self.discriminator = None

        if cancel_initiator is not None:
            self.cancel_initiator = cancel_initiator
        if carrier is not None:
            self.carrier = carrier
        if error_messages is not None:
            self.error_messages = error_messages
        if parcel_tracking_number is not None:
            self.parcel_tracking_number = parcel_tracking_number
        if status is not None:
            self.status = status
        if total_carrier_charge is not None:
            self.total_carrier_charge = total_carrier_charge

    @property
    def cancel_initiator(self):
        """Gets the cancel_initiator of this CancelShipment.  # noqa: E501


        :return: The cancel_initiator of this CancelShipment.  # noqa: E501
        :rtype: str
        """
        return self._cancel_initiator

    @cancel_initiator.setter
    def cancel_initiator(self, cancel_initiator):
        """Sets the cancel_initiator of this CancelShipment.


        :param cancel_initiator: The cancel_initiator of this CancelShipment.  # noqa: E501
        :type: str
        """

        self._cancel_initiator = cancel_initiator

    @property
    def carrier(self):
        """Gets the carrier of this CancelShipment.  # noqa: E501


        :return: The carrier of this CancelShipment.  # noqa: E501
        :rtype: str
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this CancelShipment.


        :param carrier: The carrier of this CancelShipment.  # noqa: E501
        :type: str
        """

        self._carrier = carrier

    @property
    def error_messages(self):
        """Gets the error_messages of this CancelShipment.  # noqa: E501


        :return: The error_messages of this CancelShipment.  # noqa: E501
        :rtype: list[Errors]
        """
        return self._error_messages

    @error_messages.setter
    def error_messages(self, error_messages):
        """Sets the error_messages of this CancelShipment.


        :param error_messages: The error_messages of this CancelShipment.  # noqa: E501
        :type: list[Errors]
        """

        self._error_messages = error_messages

    @property
    def parcel_tracking_number(self):
        """Gets the parcel_tracking_number of this CancelShipment.  # noqa: E501


        :return: The parcel_tracking_number of this CancelShipment.  # noqa: E501
        :rtype: str
        """
        return self._parcel_tracking_number

    @parcel_tracking_number.setter
    def parcel_tracking_number(self, parcel_tracking_number):
        """Sets the parcel_tracking_number of this CancelShipment.


        :param parcel_tracking_number: The parcel_tracking_number of this CancelShipment.  # noqa: E501
        :type: str
        """

        self._parcel_tracking_number = parcel_tracking_number

    @property
    def status(self):
        """Gets the status of this CancelShipment.  # noqa: E501


        :return: The status of this CancelShipment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CancelShipment.


        :param status: The status of this CancelShipment.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def total_carrier_charge(self):
        """Gets the total_carrier_charge of this CancelShipment.  # noqa: E501


        :return: The total_carrier_charge of this CancelShipment.  # noqa: E501
        :rtype: float
        """
        return self._total_carrier_charge

    @total_carrier_charge.setter
    def total_carrier_charge(self, total_carrier_charge):
        """Sets the total_carrier_charge of this CancelShipment.


        :param total_carrier_charge: The total_carrier_charge of this CancelShipment.  # noqa: E501
        :type: float
        """

        self._total_carrier_charge = total_carrier_charge

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CancelShipment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CancelShipment):
            return True

        return self.to_dict() != other.to_dict()
