# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pbshipping.configuration import Configuration


class WeightRules(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'required': 'bool',
        'unit_of_measurement': 'str',
        'min_weight': 'float',
        'max_weight': 'float'
    }

    attribute_map = {
        'required': 'required',
        'unit_of_measurement': 'unitOfMeasurement',
        'min_weight': 'minWeight',
        'max_weight': 'maxWeight'
    }

    def __init__(self, required=None, unit_of_measurement=None, min_weight=None, max_weight=None, local_vars_configuration=None):  # noqa: E501
        """WeightRules - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._required = None
        self._unit_of_measurement = None
        self._min_weight = None
        self._max_weight = None
        self.discriminator = None

        if required is not None:
            self.required = required
        if unit_of_measurement is not None:
            self.unit_of_measurement = unit_of_measurement
        if min_weight is not None:
            self.min_weight = min_weight
        if max_weight is not None:
            self.max_weight = max_weight

    @property
    def required(self):
        """Gets the required of this WeightRules.  # noqa: E501


        :return: The required of this WeightRules.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this WeightRules.


        :param required: The required of this WeightRules.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def unit_of_measurement(self):
        """Gets the unit_of_measurement of this WeightRules.  # noqa: E501


        :return: The unit_of_measurement of this WeightRules.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measurement

    @unit_of_measurement.setter
    def unit_of_measurement(self, unit_of_measurement):
        """Sets the unit_of_measurement of this WeightRules.


        :param unit_of_measurement: The unit_of_measurement of this WeightRules.  # noqa: E501
        :type: str
        """

        self._unit_of_measurement = unit_of_measurement

    @property
    def min_weight(self):
        """Gets the min_weight of this WeightRules.  # noqa: E501


        :return: The min_weight of this WeightRules.  # noqa: E501
        :rtype: float
        """
        return self._min_weight

    @min_weight.setter
    def min_weight(self, min_weight):
        """Sets the min_weight of this WeightRules.


        :param min_weight: The min_weight of this WeightRules.  # noqa: E501
        :type: float
        """

        self._min_weight = min_weight

    @property
    def max_weight(self):
        """Gets the max_weight of this WeightRules.  # noqa: E501


        :return: The max_weight of this WeightRules.  # noqa: E501
        :rtype: float
        """
        return self._max_weight

    @max_weight.setter
    def max_weight(self, max_weight):
        """Sets the max_weight of this WeightRules.


        :param max_weight: The max_weight of this WeightRules.  # noqa: E501
        :type: float
        """

        self._max_weight = max_weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WeightRules):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WeightRules):
            return True

        return self.to_dict() != other.to_dict()
