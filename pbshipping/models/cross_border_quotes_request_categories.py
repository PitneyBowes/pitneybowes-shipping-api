# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pbshipping.configuration import Configuration


class CrossBorderQuotesRequestCategories(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'category_code': 'str',
        'descriptions': 'list[CrossBorderQuotesRequestDescriptions]',
        'parent_category_code': 'str',
        'url': 'str'
    }

    attribute_map = {
        'category_code': 'categoryCode',
        'descriptions': 'descriptions',
        'parent_category_code': 'parentCategoryCode',
        'url': 'url'
    }

    def __init__(self, category_code=None, descriptions=None, parent_category_code=None, url=None, local_vars_configuration=None):  # noqa: E501
        """CrossBorderQuotesRequestCategories - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._category_code = None
        self._descriptions = None
        self._parent_category_code = None
        self._url = None
        self.discriminator = None

        if category_code is not None:
            self.category_code = category_code
        if descriptions is not None:
            self.descriptions = descriptions
        if parent_category_code is not None:
            self.parent_category_code = parent_category_code
        if url is not None:
            self.url = url

    @property
    def category_code(self):
        """Gets the category_code of this CrossBorderQuotesRequestCategories.  # noqa: E501


        :return: The category_code of this CrossBorderQuotesRequestCategories.  # noqa: E501
        :rtype: str
        """
        return self._category_code

    @category_code.setter
    def category_code(self, category_code):
        """Sets the category_code of this CrossBorderQuotesRequestCategories.


        :param category_code: The category_code of this CrossBorderQuotesRequestCategories.  # noqa: E501
        :type: str
        """

        self._category_code = category_code

    @property
    def descriptions(self):
        """Gets the descriptions of this CrossBorderQuotesRequestCategories.  # noqa: E501


        :return: The descriptions of this CrossBorderQuotesRequestCategories.  # noqa: E501
        :rtype: list[CrossBorderQuotesRequestDescriptions]
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """Sets the descriptions of this CrossBorderQuotesRequestCategories.


        :param descriptions: The descriptions of this CrossBorderQuotesRequestCategories.  # noqa: E501
        :type: list[CrossBorderQuotesRequestDescriptions]
        """

        self._descriptions = descriptions

    @property
    def parent_category_code(self):
        """Gets the parent_category_code of this CrossBorderQuotesRequestCategories.  # noqa: E501


        :return: The parent_category_code of this CrossBorderQuotesRequestCategories.  # noqa: E501
        :rtype: str
        """
        return self._parent_category_code

    @parent_category_code.setter
    def parent_category_code(self, parent_category_code):
        """Sets the parent_category_code of this CrossBorderQuotesRequestCategories.


        :param parent_category_code: The parent_category_code of this CrossBorderQuotesRequestCategories.  # noqa: E501
        :type: str
        """

        self._parent_category_code = parent_category_code

    @property
    def url(self):
        """Gets the url of this CrossBorderQuotesRequestCategories.  # noqa: E501


        :return: The url of this CrossBorderQuotesRequestCategories.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CrossBorderQuotesRequestCategories.


        :param url: The url of this CrossBorderQuotesRequestCategories.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrossBorderQuotesRequestCategories):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CrossBorderQuotesRequestCategories):
            return True

        return self.to_dict() != other.to_dict()
