# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pbshipping.configuration import Configuration


class CarrierFacilityResponseCarrierFacilitySuggestions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address': 'Address',
        'carrier_facility_attributes': 'list[CarrierFacilityResponseCarrierFacilityOptions]',
        'facility_hours': 'list[CarrierFacilityResponseFacilityHours]',
        'facility_parking': 'str'
    }

    attribute_map = {
        'address': 'address',
        'carrier_facility_attributes': 'carrierFacilityAttributes',
        'facility_hours': 'facilityHours',
        'facility_parking': 'facilityParking'
    }

    def __init__(self, address=None, carrier_facility_attributes=None, facility_hours=None, facility_parking=None, local_vars_configuration=None):  # noqa: E501
        """CarrierFacilityResponseCarrierFacilitySuggestions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._address = None
        self._carrier_facility_attributes = None
        self._facility_hours = None
        self._facility_parking = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if carrier_facility_attributes is not None:
            self.carrier_facility_attributes = carrier_facility_attributes
        if facility_hours is not None:
            self.facility_hours = facility_hours
        if facility_parking is not None:
            self.facility_parking = facility_parking

    @property
    def address(self):
        """Gets the address of this CarrierFacilityResponseCarrierFacilitySuggestions.  # noqa: E501


        :return: The address of this CarrierFacilityResponseCarrierFacilitySuggestions.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CarrierFacilityResponseCarrierFacilitySuggestions.


        :param address: The address of this CarrierFacilityResponseCarrierFacilitySuggestions.  # noqa: E501
        :type: Address
        """

        self._address = address

    @property
    def carrier_facility_attributes(self):
        """Gets the carrier_facility_attributes of this CarrierFacilityResponseCarrierFacilitySuggestions.  # noqa: E501


        :return: The carrier_facility_attributes of this CarrierFacilityResponseCarrierFacilitySuggestions.  # noqa: E501
        :rtype: list[CarrierFacilityResponseCarrierFacilityOptions]
        """
        return self._carrier_facility_attributes

    @carrier_facility_attributes.setter
    def carrier_facility_attributes(self, carrier_facility_attributes):
        """Sets the carrier_facility_attributes of this CarrierFacilityResponseCarrierFacilitySuggestions.


        :param carrier_facility_attributes: The carrier_facility_attributes of this CarrierFacilityResponseCarrierFacilitySuggestions.  # noqa: E501
        :type: list[CarrierFacilityResponseCarrierFacilityOptions]
        """

        self._carrier_facility_attributes = carrier_facility_attributes

    @property
    def facility_hours(self):
        """Gets the facility_hours of this CarrierFacilityResponseCarrierFacilitySuggestions.  # noqa: E501


        :return: The facility_hours of this CarrierFacilityResponseCarrierFacilitySuggestions.  # noqa: E501
        :rtype: list[CarrierFacilityResponseFacilityHours]
        """
        return self._facility_hours

    @facility_hours.setter
    def facility_hours(self, facility_hours):
        """Sets the facility_hours of this CarrierFacilityResponseCarrierFacilitySuggestions.


        :param facility_hours: The facility_hours of this CarrierFacilityResponseCarrierFacilitySuggestions.  # noqa: E501
        :type: list[CarrierFacilityResponseFacilityHours]
        """

        self._facility_hours = facility_hours

    @property
    def facility_parking(self):
        """Gets the facility_parking of this CarrierFacilityResponseCarrierFacilitySuggestions.  # noqa: E501


        :return: The facility_parking of this CarrierFacilityResponseCarrierFacilitySuggestions.  # noqa: E501
        :rtype: str
        """
        return self._facility_parking

    @facility_parking.setter
    def facility_parking(self, facility_parking):
        """Sets the facility_parking of this CarrierFacilityResponseCarrierFacilitySuggestions.


        :param facility_parking: The facility_parking of this CarrierFacilityResponseCarrierFacilitySuggestions.  # noqa: E501
        :type: str
        """

        self._facility_parking = facility_parking

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CarrierFacilityResponseCarrierFacilitySuggestions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CarrierFacilityResponseCarrierFacilitySuggestions):
            return True

        return self.to_dict() != other.to_dict()
