# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pbshipping.configuration import Configuration


class ParcelProtectionCreateRequestShipmentInfoShipperInfoAddress(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address_lines': 'list[str]',
        'city_town': 'str',
        'state_province': 'str',
        'postal_code': 'str',
        'country_code': 'str'
    }

    attribute_map = {
        'address_lines': 'addressLines',
        'city_town': 'cityTown',
        'state_province': 'stateProvince',
        'postal_code': 'postalCode',
        'country_code': 'countryCode'
    }

    def __init__(self, address_lines=None, city_town=None, state_province=None, postal_code=None, country_code=None, local_vars_configuration=None):  # noqa: E501
        """ParcelProtectionCreateRequestShipmentInfoShipperInfoAddress - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._address_lines = None
        self._city_town = None
        self._state_province = None
        self._postal_code = None
        self._country_code = None
        self.discriminator = None

        if address_lines is not None:
            self.address_lines = address_lines
        if city_town is not None:
            self.city_town = city_town
        if state_province is not None:
            self.state_province = state_province
        if postal_code is not None:
            self.postal_code = postal_code
        if country_code is not None:
            self.country_code = country_code

    @property
    def address_lines(self):
        """Gets the address_lines of this ParcelProtectionCreateRequestShipmentInfoShipperInfoAddress.  # noqa: E501


        :return: The address_lines of this ParcelProtectionCreateRequestShipmentInfoShipperInfoAddress.  # noqa: E501
        :rtype: list[str]
        """
        return self._address_lines

    @address_lines.setter
    def address_lines(self, address_lines):
        """Sets the address_lines of this ParcelProtectionCreateRequestShipmentInfoShipperInfoAddress.


        :param address_lines: The address_lines of this ParcelProtectionCreateRequestShipmentInfoShipperInfoAddress.  # noqa: E501
        :type: list[str]
        """

        self._address_lines = address_lines

    @property
    def city_town(self):
        """Gets the city_town of this ParcelProtectionCreateRequestShipmentInfoShipperInfoAddress.  # noqa: E501


        :return: The city_town of this ParcelProtectionCreateRequestShipmentInfoShipperInfoAddress.  # noqa: E501
        :rtype: str
        """
        return self._city_town

    @city_town.setter
    def city_town(self, city_town):
        """Sets the city_town of this ParcelProtectionCreateRequestShipmentInfoShipperInfoAddress.


        :param city_town: The city_town of this ParcelProtectionCreateRequestShipmentInfoShipperInfoAddress.  # noqa: E501
        :type: str
        """

        self._city_town = city_town

    @property
    def state_province(self):
        """Gets the state_province of this ParcelProtectionCreateRequestShipmentInfoShipperInfoAddress.  # noqa: E501


        :return: The state_province of this ParcelProtectionCreateRequestShipmentInfoShipperInfoAddress.  # noqa: E501
        :rtype: str
        """
        return self._state_province

    @state_province.setter
    def state_province(self, state_province):
        """Sets the state_province of this ParcelProtectionCreateRequestShipmentInfoShipperInfoAddress.


        :param state_province: The state_province of this ParcelProtectionCreateRequestShipmentInfoShipperInfoAddress.  # noqa: E501
        :type: str
        """

        self._state_province = state_province

    @property
    def postal_code(self):
        """Gets the postal_code of this ParcelProtectionCreateRequestShipmentInfoShipperInfoAddress.  # noqa: E501


        :return: The postal_code of this ParcelProtectionCreateRequestShipmentInfoShipperInfoAddress.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ParcelProtectionCreateRequestShipmentInfoShipperInfoAddress.


        :param postal_code: The postal_code of this ParcelProtectionCreateRequestShipmentInfoShipperInfoAddress.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def country_code(self):
        """Gets the country_code of this ParcelProtectionCreateRequestShipmentInfoShipperInfoAddress.  # noqa: E501


        :return: The country_code of this ParcelProtectionCreateRequestShipmentInfoShipperInfoAddress.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this ParcelProtectionCreateRequestShipmentInfoShipperInfoAddress.


        :param country_code: The country_code of this ParcelProtectionCreateRequestShipmentInfoShipperInfoAddress.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParcelProtectionCreateRequestShipmentInfoShipperInfoAddress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ParcelProtectionCreateRequestShipmentInfoShipperInfoAddress):
            return True

        return self.to_dict() != other.to_dict()
