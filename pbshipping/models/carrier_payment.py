# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pbshipping.configuration import Configuration


class CarrierPayment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_number': 'str',
        'country_code': 'str',
        'party': 'str',
        'postal_code': 'str',
        'type_of_charge': 'str'
    }

    attribute_map = {
        'account_number': 'accountNumber',
        'country_code': 'countryCode',
        'party': 'party',
        'postal_code': 'postalCode',
        'type_of_charge': 'typeOfCharge'
    }

    def __init__(self, account_number=None, country_code=None, party=None, postal_code=None, type_of_charge=None, local_vars_configuration=None):  # noqa: E501
        """CarrierPayment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_number = None
        self._country_code = None
        self._party = None
        self._postal_code = None
        self._type_of_charge = None
        self.discriminator = None

        if account_number is not None:
            self.account_number = account_number
        if country_code is not None:
            self.country_code = country_code
        self.party = party
        if postal_code is not None:
            self.postal_code = postal_code
        self.type_of_charge = type_of_charge

    @property
    def account_number(self):
        """Gets the account_number of this CarrierPayment.  # noqa: E501


        :return: The account_number of this CarrierPayment.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CarrierPayment.


        :param account_number: The account_number of this CarrierPayment.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def country_code(self):
        """Gets the country_code of this CarrierPayment.  # noqa: E501


        :return: The country_code of this CarrierPayment.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this CarrierPayment.


        :param country_code: The country_code of this CarrierPayment.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def party(self):
        """Gets the party of this CarrierPayment.  # noqa: E501


        :return: The party of this CarrierPayment.  # noqa: E501
        :rtype: str
        """
        return self._party

    @party.setter
    def party(self, party):
        """Sets the party of this CarrierPayment.


        :param party: The party of this CarrierPayment.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and party is None:  # noqa: E501
            raise ValueError("Invalid value for `party`, must not be `None`")  # noqa: E501
        allowed_values = ["BILL_RECEIVER", "BILL_SENDER", "BILL_THIRD_PARTY", "BILL_RECEIVER_CONTRACT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and party not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `party` ({0}), must be one of {1}"  # noqa: E501
                .format(party, allowed_values)
            )

        self._party = party

    @property
    def postal_code(self):
        """Gets the postal_code of this CarrierPayment.  # noqa: E501


        :return: The postal_code of this CarrierPayment.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this CarrierPayment.


        :param postal_code: The postal_code of this CarrierPayment.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def type_of_charge(self):
        """Gets the type_of_charge of this CarrierPayment.  # noqa: E501


        :return: The type_of_charge of this CarrierPayment.  # noqa: E501
        :rtype: str
        """
        return self._type_of_charge

    @type_of_charge.setter
    def type_of_charge(self, type_of_charge):
        """Sets the type_of_charge of this CarrierPayment.


        :param type_of_charge: The type_of_charge of this CarrierPayment.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type_of_charge is None:  # noqa: E501
            raise ValueError("Invalid value for `type_of_charge`, must not be `None`")  # noqa: E501
        allowed_values = ["TRANSPORTATION_CHARGES", "DUTIES_AND_TAXES", "ALL_CHARGES"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type_of_charge not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type_of_charge` ({0}), must be one of {1}"  # noqa: E501
                .format(type_of_charge, allowed_values)
            )

        self._type_of_charge = type_of_charge

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CarrierPayment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CarrierPayment):
            return True

        return self.to_dict() != other.to_dict()
