# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pbshipping.configuration import Configuration


class AddTrackingEventsReferences(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'reference_type': 'str',
        'reference_value': 'str',
        'events': 'list[AddTrackingEventsEvents]'
    }

    attribute_map = {
        'reference_type': 'referenceType',
        'reference_value': 'referenceValue',
        'events': 'events'
    }

    def __init__(self, reference_type=None, reference_value=None, events=None, local_vars_configuration=None):  # noqa: E501
        """AddTrackingEventsReferences - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._reference_type = None
        self._reference_value = None
        self._events = None
        self.discriminator = None

        if reference_type is not None:
            self.reference_type = reference_type
        if reference_value is not None:
            self.reference_value = reference_value
        if events is not None:
            self.events = events

    @property
    def reference_type(self):
        """Gets the reference_type of this AddTrackingEventsReferences.  # noqa: E501


        :return: The reference_type of this AddTrackingEventsReferences.  # noqa: E501
        :rtype: str
        """
        return self._reference_type

    @reference_type.setter
    def reference_type(self, reference_type):
        """Sets the reference_type of this AddTrackingEventsReferences.


        :param reference_type: The reference_type of this AddTrackingEventsReferences.  # noqa: E501
        :type: str
        """

        self._reference_type = reference_type

    @property
    def reference_value(self):
        """Gets the reference_value of this AddTrackingEventsReferences.  # noqa: E501


        :return: The reference_value of this AddTrackingEventsReferences.  # noqa: E501
        :rtype: str
        """
        return self._reference_value

    @reference_value.setter
    def reference_value(self, reference_value):
        """Sets the reference_value of this AddTrackingEventsReferences.


        :param reference_value: The reference_value of this AddTrackingEventsReferences.  # noqa: E501
        :type: str
        """

        self._reference_value = reference_value

    @property
    def events(self):
        """Gets the events of this AddTrackingEventsReferences.  # noqa: E501


        :return: The events of this AddTrackingEventsReferences.  # noqa: E501
        :rtype: list[AddTrackingEventsEvents]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this AddTrackingEventsReferences.


        :param events: The events of this AddTrackingEventsReferences.  # noqa: E501
        :type: list[AddTrackingEventsEvents]
        """

        self._events = events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddTrackingEventsReferences):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddTrackingEventsReferences):
            return True

        return self.to_dict() != other.to_dict()
