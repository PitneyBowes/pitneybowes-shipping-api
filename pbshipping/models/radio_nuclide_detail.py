# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pbshipping.configuration import Configuration


class RadioNuclideDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'chemical_form': 'str',
        'expected_package_reportable_quantity': 'bool',
        'physical_form': 'str',
        'radio_nuclide': 'str',
        'radio_nuclide_activity_uom': 'str',
        'radio_nuclide_activity_value': 'float'
    }

    attribute_map = {
        'chemical_form': 'chemicalForm',
        'expected_package_reportable_quantity': 'expectedPackageReportableQuantity',
        'physical_form': 'physicalForm',
        'radio_nuclide': 'radioNuclide',
        'radio_nuclide_activity_uom': 'radioNuclideActivityUOM',
        'radio_nuclide_activity_value': 'radioNuclideActivityValue'
    }

    def __init__(self, chemical_form=None, expected_package_reportable_quantity=None, physical_form=None, radio_nuclide=None, radio_nuclide_activity_uom=None, radio_nuclide_activity_value=None, local_vars_configuration=None):  # noqa: E501
        """RadioNuclideDetail - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._chemical_form = None
        self._expected_package_reportable_quantity = None
        self._physical_form = None
        self._radio_nuclide = None
        self._radio_nuclide_activity_uom = None
        self._radio_nuclide_activity_value = None
        self.discriminator = None

        if chemical_form is not None:
            self.chemical_form = chemical_form
        if expected_package_reportable_quantity is not None:
            self.expected_package_reportable_quantity = expected_package_reportable_quantity
        if physical_form is not None:
            self.physical_form = physical_form
        if radio_nuclide is not None:
            self.radio_nuclide = radio_nuclide
        if radio_nuclide_activity_uom is not None:
            self.radio_nuclide_activity_uom = radio_nuclide_activity_uom
        if radio_nuclide_activity_value is not None:
            self.radio_nuclide_activity_value = radio_nuclide_activity_value

    @property
    def chemical_form(self):
        """Gets the chemical_form of this RadioNuclideDetail.  # noqa: E501


        :return: The chemical_form of this RadioNuclideDetail.  # noqa: E501
        :rtype: str
        """
        return self._chemical_form

    @chemical_form.setter
    def chemical_form(self, chemical_form):
        """Sets the chemical_form of this RadioNuclideDetail.


        :param chemical_form: The chemical_form of this RadioNuclideDetail.  # noqa: E501
        :type: str
        """

        self._chemical_form = chemical_form

    @property
    def expected_package_reportable_quantity(self):
        """Gets the expected_package_reportable_quantity of this RadioNuclideDetail.  # noqa: E501


        :return: The expected_package_reportable_quantity of this RadioNuclideDetail.  # noqa: E501
        :rtype: bool
        """
        return self._expected_package_reportable_quantity

    @expected_package_reportable_quantity.setter
    def expected_package_reportable_quantity(self, expected_package_reportable_quantity):
        """Sets the expected_package_reportable_quantity of this RadioNuclideDetail.


        :param expected_package_reportable_quantity: The expected_package_reportable_quantity of this RadioNuclideDetail.  # noqa: E501
        :type: bool
        """

        self._expected_package_reportable_quantity = expected_package_reportable_quantity

    @property
    def physical_form(self):
        """Gets the physical_form of this RadioNuclideDetail.  # noqa: E501


        :return: The physical_form of this RadioNuclideDetail.  # noqa: E501
        :rtype: str
        """
        return self._physical_form

    @physical_form.setter
    def physical_form(self, physical_form):
        """Sets the physical_form of this RadioNuclideDetail.


        :param physical_form: The physical_form of this RadioNuclideDetail.  # noqa: E501
        :type: str
        """

        self._physical_form = physical_form

    @property
    def radio_nuclide(self):
        """Gets the radio_nuclide of this RadioNuclideDetail.  # noqa: E501


        :return: The radio_nuclide of this RadioNuclideDetail.  # noqa: E501
        :rtype: str
        """
        return self._radio_nuclide

    @radio_nuclide.setter
    def radio_nuclide(self, radio_nuclide):
        """Sets the radio_nuclide of this RadioNuclideDetail.


        :param radio_nuclide: The radio_nuclide of this RadioNuclideDetail.  # noqa: E501
        :type: str
        """

        self._radio_nuclide = radio_nuclide

    @property
    def radio_nuclide_activity_uom(self):
        """Gets the radio_nuclide_activity_uom of this RadioNuclideDetail.  # noqa: E501


        :return: The radio_nuclide_activity_uom of this RadioNuclideDetail.  # noqa: E501
        :rtype: str
        """
        return self._radio_nuclide_activity_uom

    @radio_nuclide_activity_uom.setter
    def radio_nuclide_activity_uom(self, radio_nuclide_activity_uom):
        """Sets the radio_nuclide_activity_uom of this RadioNuclideDetail.


        :param radio_nuclide_activity_uom: The radio_nuclide_activity_uom of this RadioNuclideDetail.  # noqa: E501
        :type: str
        """

        self._radio_nuclide_activity_uom = radio_nuclide_activity_uom

    @property
    def radio_nuclide_activity_value(self):
        """Gets the radio_nuclide_activity_value of this RadioNuclideDetail.  # noqa: E501


        :return: The radio_nuclide_activity_value of this RadioNuclideDetail.  # noqa: E501
        :rtype: float
        """
        return self._radio_nuclide_activity_value

    @radio_nuclide_activity_value.setter
    def radio_nuclide_activity_value(self, radio_nuclide_activity_value):
        """Sets the radio_nuclide_activity_value of this RadioNuclideDetail.


        :param radio_nuclide_activity_value: The radio_nuclide_activity_value of this RadioNuclideDetail.  # noqa: E501
        :type: float
        """

        self._radio_nuclide_activity_value = radio_nuclide_activity_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RadioNuclideDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RadioNuclideDetail):
            return True

        return self.to_dict() != other.to_dict()
