# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pbshipping.api_client import ApiClient
from pbshipping.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class CarrierInfoApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_carrier_facilities(self, carrier_facility_request, **kwargs):  # noqa: E501
        """Find Carrier Facilities  # noqa: E501

        This operation locates Post Offices and other facilities for a given carrier. You can use this operation, for example, to locate all USPS Post Offices near to a given postal code.If you use the Standard Return API and if you use the option to print a QR code, use this API to locate facilities where the buyer can print the label from the QR code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_carrier_facilities(carrier_facility_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param CarrierFacilityRequest carrier_facility_request: (required)
        :param bool x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: CarrierFacilityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_carrier_facilities_with_http_info(carrier_facility_request, **kwargs)  # noqa: E501

    def get_carrier_facilities_with_http_info(self, carrier_facility_request, **kwargs):  # noqa: E501
        """Find Carrier Facilities  # noqa: E501

        This operation locates Post Offices and other facilities for a given carrier. You can use this operation, for example, to locate all USPS Post Offices near to a given postal code.If you use the Standard Return API and if you use the option to print a QR code, use this API to locate facilities where the buyer can print the label from the QR code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_carrier_facilities_with_http_info(carrier_facility_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param CarrierFacilityRequest carrier_facility_request: (required)
        :param bool x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(CarrierFacilityResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'carrier_facility_request',
            'x_pb_unified_error_structure'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_carrier_facilities" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'carrier_facility_request' is set
        if self.api_client.client_side_validation and ('carrier_facility_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['carrier_facility_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `carrier_facility_request` when calling `get_carrier_facilities`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_pb_unified_error_structure' in local_var_params:
            header_params['X-PB-UnifiedErrorStructure'] = local_var_params['x_pb_unified_error_structure']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'carrier_facility_request' in local_var_params:
            body_params = local_var_params['carrier_facility_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        return self.api_client.call_api(
            '/v1/carrier-facility', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CarrierFacilityResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_carrier_license_agreement(self, carrier, origin_country_code, **kwargs):  # noqa: E501
        """This operation retrieves a carrier's license agreement.  # noqa: E501

        This operation retrieves a carrier's license agreement. The operation is used in the [Carrier Registration Tutorial](https://shipping.pitneybowes.com/carrier-registration.html).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_carrier_license_agreement(carrier, origin_country_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str carrier: The carrier name. Currently this must be set to: UPS (required)
        :param ISOCountryCode origin_country_code: The two-character ISO country code for the country where the shipment originates. (required)
        :param bool x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_carrier_license_agreement_with_http_info(carrier, origin_country_code, **kwargs)  # noqa: E501

    def get_carrier_license_agreement_with_http_info(self, carrier, origin_country_code, **kwargs):  # noqa: E501
        """This operation retrieves a carrier's license agreement.  # noqa: E501

        This operation retrieves a carrier's license agreement. The operation is used in the [Carrier Registration Tutorial](https://shipping.pitneybowes.com/carrier-registration.html).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_carrier_license_agreement_with_http_info(carrier, origin_country_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str carrier: The carrier name. Currently this must be set to: UPS (required)
        :param ISOCountryCode origin_country_code: The two-character ISO country code for the country where the shipment originates. (required)
        :param bool x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse200, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'carrier',
            'origin_country_code',
            'x_pb_unified_error_structure'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_carrier_license_agreement" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'carrier' is set
        if self.api_client.client_side_validation and ('carrier' not in local_var_params or  # noqa: E501
                                                        local_var_params['carrier'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `carrier` when calling `get_carrier_license_agreement`")  # noqa: E501
        # verify the required parameter 'origin_country_code' is set
        if self.api_client.client_side_validation and ('origin_country_code' not in local_var_params or  # noqa: E501
                                                        local_var_params['origin_country_code'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `origin_country_code` when calling `get_carrier_license_agreement`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'carrier' in local_var_params and local_var_params['carrier'] is not None:  # noqa: E501
            query_params.append(('carrier', local_var_params['carrier']))  # noqa: E501
        if 'origin_country_code' in local_var_params and local_var_params['origin_country_code'] is not None:  # noqa: E501
            query_params.append(('originCountryCode', local_var_params['origin_country_code']))  # noqa: E501

        header_params = {}
        if 'x_pb_unified_error_structure' in local_var_params:
            header_params['X-PB-UnifiedErrorStructure'] = local_var_params['x_pb_unified_error_structure']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        return self.api_client.call_api(
            '/v1/carrier/license-agreements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_carrier_service_rules(self, carrier, origin_country_code, destination_country_code, **kwargs):  # noqa: E501
        """Retrieves the rules governing the carrier's services.  # noqa: E501

        This operation retrieves the rules governing the carrier's services, including the available parcel types and the limits on weights and dimensions. **This API currently returns rules only for USPS** . Find more information at [Get Carrier Rules](https://shipping.pitneybowes.com/api/get-carrier-rules.html)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_carrier_service_rules(carrier, origin_country_code, destination_country_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Carrier carrier: The carrier name. **Currently this must be set to: USPS**  (required)
        :param ISOCountryCode origin_country_code: The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country where the shipment originates. (required)
        :param ISOCountryCode destination_country_code: The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country of the shipment's destination address. (required)
        :param bool x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :param str rate_type_id: The type of rate requested, such as COMMERCIAL_BASE. If a rate type is not specified, all eligible rate types are returned.
        :param str future_shipment_date: If the shipment is for a future date, and if a rate change is expected before the shipment date, use this field to ensure you get the correct rates and correct rate rules. Note that a rate change can affect the structure of the rate rules as well as the actual rates.Specify this value in UTC/GMT, not in local time. Formats allowed are   * **YYYY-MM-DD**   * **YYYY-MM-DD HH:mm:ss** * **YYYY-MM-DD HH:mm:ss.SSS**
        :param datetime return_shipment: If set to true, provides only services applicable for return shipment.
        :param bool compact_response: If set to true, returns only summary, without special service details.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: CarrierRule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_carrier_service_rules_with_http_info(carrier, origin_country_code, destination_country_code, **kwargs)  # noqa: E501

    def get_carrier_service_rules_with_http_info(self, carrier, origin_country_code, destination_country_code, **kwargs):  # noqa: E501
        """Retrieves the rules governing the carrier's services.  # noqa: E501

        This operation retrieves the rules governing the carrier's services, including the available parcel types and the limits on weights and dimensions. **This API currently returns rules only for USPS** . Find more information at [Get Carrier Rules](https://shipping.pitneybowes.com/api/get-carrier-rules.html)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_carrier_service_rules_with_http_info(carrier, origin_country_code, destination_country_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Carrier carrier: The carrier name. **Currently this must be set to: USPS**  (required)
        :param ISOCountryCode origin_country_code: The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country where the shipment originates. (required)
        :param ISOCountryCode destination_country_code: The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country of the shipment's destination address. (required)
        :param bool x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :param str rate_type_id: The type of rate requested, such as COMMERCIAL_BASE. If a rate type is not specified, all eligible rate types are returned.
        :param str future_shipment_date: If the shipment is for a future date, and if a rate change is expected before the shipment date, use this field to ensure you get the correct rates and correct rate rules. Note that a rate change can affect the structure of the rate rules as well as the actual rates.Specify this value in UTC/GMT, not in local time. Formats allowed are   * **YYYY-MM-DD**   * **YYYY-MM-DD HH:mm:ss** * **YYYY-MM-DD HH:mm:ss.SSS**
        :param datetime return_shipment: If set to true, provides only services applicable for return shipment.
        :param bool compact_response: If set to true, returns only summary, without special service details.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(CarrierRule, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'carrier',
            'origin_country_code',
            'destination_country_code',
            'x_pb_unified_error_structure',
            'rate_type_id',
            'future_shipment_date',
            'return_shipment',
            'compact_response'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_carrier_service_rules" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'carrier' is set
        if self.api_client.client_side_validation and ('carrier' not in local_var_params or  # noqa: E501
                                                        local_var_params['carrier'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `carrier` when calling `get_carrier_service_rules`")  # noqa: E501
        # verify the required parameter 'origin_country_code' is set
        if self.api_client.client_side_validation and ('origin_country_code' not in local_var_params or  # noqa: E501
                                                        local_var_params['origin_country_code'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `origin_country_code` when calling `get_carrier_service_rules`")  # noqa: E501
        # verify the required parameter 'destination_country_code' is set
        if self.api_client.client_side_validation and ('destination_country_code' not in local_var_params or  # noqa: E501
                                                        local_var_params['destination_country_code'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `destination_country_code` when calling `get_carrier_service_rules`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'carrier' in local_var_params and local_var_params['carrier'] is not None:  # noqa: E501
            query_params.append(('carrier', local_var_params['carrier']))  # noqa: E501
        if 'origin_country_code' in local_var_params and local_var_params['origin_country_code'] is not None:  # noqa: E501
            query_params.append(('originCountryCode', local_var_params['origin_country_code']))  # noqa: E501
        if 'destination_country_code' in local_var_params and local_var_params['destination_country_code'] is not None:  # noqa: E501
            query_params.append(('destinationCountryCode', local_var_params['destination_country_code']))  # noqa: E501
        if 'rate_type_id' in local_var_params and local_var_params['rate_type_id'] is not None:  # noqa: E501
            query_params.append(('rateTypeId', local_var_params['rate_type_id']))  # noqa: E501
        if 'future_shipment_date' in local_var_params and local_var_params['future_shipment_date'] is not None:  # noqa: E501
            query_params.append(('futureShipmentDate', local_var_params['future_shipment_date']))  # noqa: E501
        if 'return_shipment' in local_var_params and local_var_params['return_shipment'] is not None:  # noqa: E501
            query_params.append(('returnShipment', local_var_params['return_shipment']))  # noqa: E501
        if 'compact_response' in local_var_params and local_var_params['compact_response'] is not None:  # noqa: E501
            query_params.append(('compactResponse', local_var_params['compact_response']))  # noqa: E501

        header_params = {}
        if 'x_pb_unified_error_structure' in local_var_params:
            header_params['X-PB-UnifiedErrorStructure'] = local_var_params['x_pb_unified_error_structure']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        return self.api_client.call_api(
            '/v1/information/rules/rating-services', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CarrierRule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_carrier_supported_destination(self, carrier, origin_country_code, **kwargs):  # noqa: E501
        """This operation returns a list of supported destination countries to which the carrier offers international shipping services.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_carrier_supported_destination(carrier, origin_country_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Carrier carrier: The carrier name. Currently this must be set to: USPS (required)
        :param ISOCountryCode origin_country_code: The two-character ISO country code for the country where the shipment originates. (required)
        :param bool x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_carrier_supported_destination_with_http_info(carrier, origin_country_code, **kwargs)  # noqa: E501

    def get_carrier_supported_destination_with_http_info(self, carrier, origin_country_code, **kwargs):  # noqa: E501
        """This operation returns a list of supported destination countries to which the carrier offers international shipping services.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_carrier_supported_destination_with_http_info(carrier, origin_country_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Carrier carrier: The carrier name. Currently this must be set to: USPS (required)
        :param ISOCountryCode origin_country_code: The two-character ISO country code for the country where the shipment originates. (required)
        :param bool x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[object], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'carrier',
            'origin_country_code',
            'x_pb_unified_error_structure'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_carrier_supported_destination" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'carrier' is set
        if self.api_client.client_side_validation and ('carrier' not in local_var_params or  # noqa: E501
                                                        local_var_params['carrier'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `carrier` when calling `get_carrier_supported_destination`")  # noqa: E501
        # verify the required parameter 'origin_country_code' is set
        if self.api_client.client_side_validation and ('origin_country_code' not in local_var_params or  # noqa: E501
                                                        local_var_params['origin_country_code'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `origin_country_code` when calling `get_carrier_supported_destination`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'carrier' in local_var_params and local_var_params['carrier'] is not None:  # noqa: E501
            query_params.append(('carrier', local_var_params['carrier']))  # noqa: E501
        if 'origin_country_code' in local_var_params and local_var_params['origin_country_code'] is not None:  # noqa: E501
            query_params.append(('originCountryCode', local_var_params['origin_country_code']))  # noqa: E501

        header_params = {}
        if 'x_pb_unified_error_structure' in local_var_params:
            header_params['X-PB-UnifiedErrorStructure'] = local_var_params['x_pb_unified_error_structure']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        return self.api_client.call_api(
            '/v1/countries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
