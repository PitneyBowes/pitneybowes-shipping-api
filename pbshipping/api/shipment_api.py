# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pbshipping.api_client import ApiClient
from pbshipping.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ShipmentApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cancel_shipment(self, x_pb_transaction_id, shipment_id, **kwargs):  # noqa: E501
        """cancelShipment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_shipment(x_pb_transaction_id, shipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str x_pb_transaction_id: Required. A unique identifier for the transaction, up to 25 characters. (required)
        :param str shipment_id: shipmentId (required)
        :param str x_pb_unified_error_structure: Recommended. Set this to true to use the standard error object if an error occurs.
        :param str x_pb_shipper_carrier_account_id: UPS Only. The unique identifier returned in the shipperCarrierAccountId field by the [Register an Existing Carrier Account API.(https://shipping.pitneybowes.com/api/post-carrier-accounts-register.html)
        :param str cancel_initiator: Indicates that this refund request is initiated by the shipper. Set this to: SHIPPER
        :param Carrier carrier: Conditional. The carrier. This is required if the carrier is not USPS
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: CancelShipment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.cancel_shipment_with_http_info(x_pb_transaction_id, shipment_id, **kwargs)  # noqa: E501

    def cancel_shipment_with_http_info(self, x_pb_transaction_id, shipment_id, **kwargs):  # noqa: E501
        """cancelShipment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_shipment_with_http_info(x_pb_transaction_id, shipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str x_pb_transaction_id: Required. A unique identifier for the transaction, up to 25 characters. (required)
        :param str shipment_id: shipmentId (required)
        :param str x_pb_unified_error_structure: Recommended. Set this to true to use the standard error object if an error occurs.
        :param str x_pb_shipper_carrier_account_id: UPS Only. The unique identifier returned in the shipperCarrierAccountId field by the [Register an Existing Carrier Account API.(https://shipping.pitneybowes.com/api/post-carrier-accounts-register.html)
        :param str cancel_initiator: Indicates that this refund request is initiated by the shipper. Set this to: SHIPPER
        :param Carrier carrier: Conditional. The carrier. This is required if the carrier is not USPS
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(CancelShipment, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'x_pb_transaction_id',
            'shipment_id',
            'x_pb_unified_error_structure',
            'x_pb_shipper_carrier_account_id',
            'cancel_initiator',
            'carrier'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_shipment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'x_pb_transaction_id' is set
        if self.api_client.client_side_validation and ('x_pb_transaction_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_pb_transaction_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_pb_transaction_id` when calling `cancel_shipment`")  # noqa: E501
        # verify the required parameter 'shipment_id' is set
        if self.api_client.client_side_validation and ('shipment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['shipment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `shipment_id` when calling `cancel_shipment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shipment_id' in local_var_params:
            path_params['shipmentId'] = local_var_params['shipment_id']  # noqa: E501

        query_params = []
        if 'cancel_initiator' in local_var_params and local_var_params['cancel_initiator'] is not None:  # noqa: E501
            query_params.append(('cancelInitiator', local_var_params['cancel_initiator']))  # noqa: E501
        if 'carrier' in local_var_params and local_var_params['carrier'] is not None:  # noqa: E501
            query_params.append(('carrier', local_var_params['carrier']))  # noqa: E501

        header_params = {}
        if 'x_pb_transaction_id' in local_var_params:
            header_params['X-PB-TransactionId'] = local_var_params['x_pb_transaction_id']  # noqa: E501
        if 'x_pb_unified_error_structure' in local_var_params:
            header_params['X-PB-UnifiedErrorStructure'] = local_var_params['x_pb_unified_error_structure']  # noqa: E501
        if 'x_pb_shipper_carrier_account_id' in local_var_params:
            header_params['X-PB-Shipper-Carrier-AccountId'] = local_var_params['x_pb_shipper_carrier_account_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        return self.api_client.call_api(
            '/v1/shipments/{shipmentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CancelShipment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_shipment_label(self, x_pb_transaction_id, shipment, **kwargs):  # noqa: E501
        """This operation creates a shipment and purchases a shipment label.  # noqa: E501

        The API returns the label as either a Base64 string or a link to a PDF. For more information visit [Create Shipment Documents](https://shipping.pitneybowes.com/api/post-shipments.html). Following are samples of different carriers -  * [Create a USPS (U.S. Postal Service) Label](https://shipping.pitneybowes.com/api/post-shipments-usps.html)  * [Create a USPS PMOD Label](https://shipping.pitneybowes.com/api/post-shipments-pmod.html) * [Create a USPS Scan-Based Return Label](https://shipping.pitneybowes.com/api/post-shipments-returns.html) * [Create a Pure Post Return Label](https://shipping.pitneybowes.com/api/post-shipments-pure-post-return.html) * [Create a Newgistics Label](https://shipping.pitneybowes.com/api/post-shipments-newgistics.html) * [Create a PB Presort Label](https://shipping.pitneybowes.com/api/post-shipments-presort.html) * [Create a PB Cross-Border Shipment](https://shipping.pitneybowes.com/api/post-shipments-cbds.html) * [Create a UPS (United Parcel Service) Label](https://shipping.pitneybowes.com/api/post-shipments-ups.html)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_shipment_label(x_pb_transaction_id, shipment, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str x_pb_transaction_id: Required. A unique identifier for the transaction, up to 25 characters. (required)
        :param Shipment shipment: request (required)
        :param bool x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :param str x_pb_integrator_carrier_id: USPS Only. Negotiated services rate, if applicable.
        :param str x_pb_shipper_rate_plan: USPS Only. Shipper rate plan, if applicable. For more information, see [this FAQ](https://shipping.pitneybowes.com/faqs/rates.html#rate-plans-faq).
        :param str x_pb_shipment_group_id:  **[Required parameter for PBPresort service](https://shipping.pitneybowes.com/api/post-shipments-presort.html)**.The job number that represents the agreement between the merchant and PB Presort. This was provided by Pitney Bowes during [merchant onboarding for PB Presort](https://shipping.pitneybowes.com/carriers/pb-presort.html).
        :param str x_pb_shipper_carrier_account_id: **[Required parameter for PBPresort service](https://shipping.pitneybowes.com/api/post-shipments-presort.html)**. The merchant's Mailer ID (MID), as provided by Pitney Bowes during merchant onboarding for PB Presort.
        :param str include_delivery_commitment: If set to true, returns estimated transit times in days. Only for USPS Create Shipment. See also [Pitney Bowes Delivery Guarantee](https://shipping.pitneybowes.com/faqs/delivery-guarantee.html) [Do all USPS services return transit times?](https://shipping.pitneybowes.com/faqs/shipments.html#transit-times-faq)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Shipment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_shipment_label_with_http_info(x_pb_transaction_id, shipment, **kwargs)  # noqa: E501

    def create_shipment_label_with_http_info(self, x_pb_transaction_id, shipment, **kwargs):  # noqa: E501
        """This operation creates a shipment and purchases a shipment label.  # noqa: E501

        The API returns the label as either a Base64 string or a link to a PDF. For more information visit [Create Shipment Documents](https://shipping.pitneybowes.com/api/post-shipments.html). Following are samples of different carriers -  * [Create a USPS (U.S. Postal Service) Label](https://shipping.pitneybowes.com/api/post-shipments-usps.html)  * [Create a USPS PMOD Label](https://shipping.pitneybowes.com/api/post-shipments-pmod.html) * [Create a USPS Scan-Based Return Label](https://shipping.pitneybowes.com/api/post-shipments-returns.html) * [Create a Pure Post Return Label](https://shipping.pitneybowes.com/api/post-shipments-pure-post-return.html) * [Create a Newgistics Label](https://shipping.pitneybowes.com/api/post-shipments-newgistics.html) * [Create a PB Presort Label](https://shipping.pitneybowes.com/api/post-shipments-presort.html) * [Create a PB Cross-Border Shipment](https://shipping.pitneybowes.com/api/post-shipments-cbds.html) * [Create a UPS (United Parcel Service) Label](https://shipping.pitneybowes.com/api/post-shipments-ups.html)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_shipment_label_with_http_info(x_pb_transaction_id, shipment, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str x_pb_transaction_id: Required. A unique identifier for the transaction, up to 25 characters. (required)
        :param Shipment shipment: request (required)
        :param bool x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :param str x_pb_integrator_carrier_id: USPS Only. Negotiated services rate, if applicable.
        :param str x_pb_shipper_rate_plan: USPS Only. Shipper rate plan, if applicable. For more information, see [this FAQ](https://shipping.pitneybowes.com/faqs/rates.html#rate-plans-faq).
        :param str x_pb_shipment_group_id:  **[Required parameter for PBPresort service](https://shipping.pitneybowes.com/api/post-shipments-presort.html)**.The job number that represents the agreement between the merchant and PB Presort. This was provided by Pitney Bowes during [merchant onboarding for PB Presort](https://shipping.pitneybowes.com/carriers/pb-presort.html).
        :param str x_pb_shipper_carrier_account_id: **[Required parameter for PBPresort service](https://shipping.pitneybowes.com/api/post-shipments-presort.html)**. The merchant's Mailer ID (MID), as provided by Pitney Bowes during merchant onboarding for PB Presort.
        :param str include_delivery_commitment: If set to true, returns estimated transit times in days. Only for USPS Create Shipment. See also [Pitney Bowes Delivery Guarantee](https://shipping.pitneybowes.com/faqs/delivery-guarantee.html) [Do all USPS services return transit times?](https://shipping.pitneybowes.com/faqs/shipments.html#transit-times-faq)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Shipment, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'x_pb_transaction_id',
            'shipment',
            'x_pb_unified_error_structure',
            'x_pb_integrator_carrier_id',
            'x_pb_shipper_rate_plan',
            'x_pb_shipment_group_id',
            'x_pb_shipper_carrier_account_id',
            'include_delivery_commitment'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_shipment_label" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'x_pb_transaction_id' is set
        if self.api_client.client_side_validation and ('x_pb_transaction_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_pb_transaction_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_pb_transaction_id` when calling `create_shipment_label`")  # noqa: E501
        # verify the required parameter 'shipment' is set
        if self.api_client.client_side_validation and ('shipment' not in local_var_params or  # noqa: E501
                                                        local_var_params['shipment'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `shipment` when calling `create_shipment_label`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_delivery_commitment' in local_var_params and local_var_params['include_delivery_commitment'] is not None:  # noqa: E501
            query_params.append(('includeDeliveryCommitment', local_var_params['include_delivery_commitment']))  # noqa: E501

        header_params = {}
        if 'x_pb_unified_error_structure' in local_var_params:
            header_params['X-PB-UnifiedErrorStructure'] = local_var_params['x_pb_unified_error_structure']  # noqa: E501
        if 'x_pb_transaction_id' in local_var_params:
            header_params['X-PB-TransactionId'] = local_var_params['x_pb_transaction_id']  # noqa: E501
        if 'x_pb_integrator_carrier_id' in local_var_params:
            header_params['X-PB-Integrator-CarrierId'] = local_var_params['x_pb_integrator_carrier_id']  # noqa: E501
        if 'x_pb_shipper_rate_plan' in local_var_params:
            header_params['X-PB-Shipper-Rate-Plan'] = local_var_params['x_pb_shipper_rate_plan']  # noqa: E501
        if 'x_pb_shipment_group_id' in local_var_params:
            header_params['X-PB-ShipmentGroupId'] = local_var_params['x_pb_shipment_group_id']  # noqa: E501
        if 'x_pb_shipper_carrier_account_id' in local_var_params:
            header_params['X-PB-Shipper-Carrier-AccountId'] = local_var_params['x_pb_shipper_carrier_account_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'shipment' in local_var_params:
            body_params = local_var_params['shipment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        return self.api_client.call_api(
            '/v1/shipments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Shipment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reprint_shipment(self, shipment_id, **kwargs):  # noqa: E501
        """reprintShipment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reprint_shipment(shipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str shipment_id: Required. The shipment ID that was issued when shipment label was generated. (required)
        :param bool x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :param Carrier carrier:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Shipment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.reprint_shipment_with_http_info(shipment_id, **kwargs)  # noqa: E501

    def reprint_shipment_with_http_info(self, shipment_id, **kwargs):  # noqa: E501
        """reprintShipment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reprint_shipment_with_http_info(shipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str shipment_id: Required. The shipment ID that was issued when shipment label was generated. (required)
        :param bool x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :param Carrier carrier:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Shipment, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'shipment_id',
            'x_pb_unified_error_structure',
            'carrier'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reprint_shipment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'shipment_id' is set
        if self.api_client.client_side_validation and ('shipment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['shipment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `shipment_id` when calling `reprint_shipment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shipment_id' in local_var_params:
            path_params['shipmentId'] = local_var_params['shipment_id']  # noqa: E501

        query_params = []
        if 'carrier' in local_var_params and local_var_params['carrier'] is not None:  # noqa: E501
            query_params.append(('carrier', local_var_params['carrier']))  # noqa: E501
        
        header_params = {}
        if 'x_pb_unified_error_structure' in local_var_params:
            header_params['X-PB-UnifiedErrorStructure'] = local_var_params['x_pb_unified_error_structure']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        return self.api_client.call_api(
            '/v1/shipments/{shipmentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Shipment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retry_shipment(self, original_transaction_id, **kwargs):  # noqa: E501
        """retryShipment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retry_shipment(original_transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str original_transaction_id: (required)
        :param bool x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :param Carrier carrier:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Shipment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.retry_shipment_with_http_info(original_transaction_id, **kwargs)  # noqa: E501

    def retry_shipment_with_http_info(self, original_transaction_id, **kwargs):  # noqa: E501
        """retryShipment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retry_shipment_with_http_info(original_transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str original_transaction_id: (required)
        :param bool x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :param Carrier carrier:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Shipment, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'original_transaction_id',
            'x_pb_unified_error_structure',
            'carrier'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retry_shipment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'original_transaction_id' is set
        if self.api_client.client_side_validation and ('original_transaction_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['original_transaction_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `original_transaction_id` when calling `retry_shipment`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'original_transaction_id' in local_var_params and local_var_params['original_transaction_id'] is not None:  # noqa: E501
            query_params.append(('originalTransactionId', local_var_params['original_transaction_id']))  # noqa: E501
        if 'carrier' in local_var_params and local_var_params['carrier'] is not None:  # noqa: E501
            query_params.append(('carrier', local_var_params['carrier']))  # noqa: E501   

        header_params = {}
        if 'x_pb_unified_error_structure' in local_var_params:
            header_params['X-PB-UnifiedErrorStructure'] = local_var_params['x_pb_unified_error_structure']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        return self.api_client.call_api(
            '/v1/shipments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Shipment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
